// +build codecgen,!notfastpath generated,!notfastpath

// Code generated by codecgen - DO NOT EDIT.

package codec

import (
	"errors"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF819781 = 1
	codecSelferCcRAW19781  = 255
	// ----- value types used ----
	codecSelferValueTypeArray19781  = 10
	codecSelferValueTypeMap19781    = 9
	codecSelferValueTypeString19781 = 6
	codecSelferValueTypeInt19781    = 2
	codecSelferValueTypeUint19781   = 3
	codecSelferValueTypeFloat19781  = 4
	codecSelferBitsize19781         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct19781 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer19781 struct{}

func codecSelfer19781False() bool { return false }

func init() {
	if GenVersion != 12 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(GenVersion), 10)
		panic("codecgen version mismatch: current: 12, need " + ver + ". Re-generate file: " + file)
	}
}

func (x *TestMammoth2) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn4 bool = x.FptrIntf == nil
			var yyn6 bool = x.FptrString == nil
			var yyn8 bool = x.FptrBytes == nil
			var yyn10 bool = x.FptrFloat32 == nil
			var yyn12 bool = x.FptrFloat64 == nil
			var yyn14 bool = x.FptrUint == nil
			var yyn16 bool = x.FptrUint8 == nil
			var yyn18 bool = x.FptrUint16 == nil
			var yyn20 bool = x.FptrUint32 == nil
			var yyn22 bool = x.FptrUint64 == nil
			var yyn24 bool = x.FptrUintptr == nil
			var yyn26 bool = x.FptrInt == nil
			var yyn28 bool = x.FptrInt8 == nil
			var yyn30 bool = x.FptrInt16 == nil
			var yyn32 bool = x.FptrInt32 == nil
			var yyn34 bool = x.FptrInt64 == nil
			var yyn36 bool = x.FptrBool == nil
			var yyn38 bool = x.FptrSliceIntf == nil
			var yyn40 bool = x.FptrSliceString == nil
			var yyn42 bool = x.FptrSliceBytes == nil
			var yyn44 bool = x.FptrSliceFloat32 == nil
			var yyn46 bool = x.FptrSliceFloat64 == nil
			var yyn48 bool = x.FptrSliceUint == nil
			var yyn50 bool = x.FptrSliceUint8 == nil
			var yyn52 bool = x.FptrSliceUint16 == nil
			var yyn54 bool = x.FptrSliceUint32 == nil
			var yyn56 bool = x.FptrSliceUint64 == nil
			var yyn58 bool = x.FptrSliceUintptr == nil
			var yyn60 bool = x.FptrSliceInt == nil
			var yyn62 bool = x.FptrSliceInt8 == nil
			var yyn64 bool = x.FptrSliceInt16 == nil
			var yyn66 bool = x.FptrSliceInt32 == nil
			var yyn68 bool = x.FptrSliceInt64 == nil
			var yyn70 bool = x.FptrSliceBool == nil
			var yyn72 bool = x.FptrMapStringIntf == nil
			var yyn74 bool = x.FptrMapStringString == nil
			var yyn76 bool = x.FptrMapStringBytes == nil
			var yyn78 bool = x.FptrMapStringUint == nil
			var yyn80 bool = x.FptrMapStringUint8 == nil
			var yyn82 bool = x.FptrMapStringUint64 == nil
			var yyn84 bool = x.FptrMapStringUintptr == nil
			var yyn86 bool = x.FptrMapStringInt == nil
			var yyn88 bool = x.FptrMapStringInt64 == nil
			var yyn90 bool = x.FptrMapStringFloat32 == nil
			var yyn92 bool = x.FptrMapStringFloat64 == nil
			var yyn94 bool = x.FptrMapStringBool == nil
			var yyn96 bool = x.FptrMapUintIntf == nil
			var yyn98 bool = x.FptrMapUintString == nil
			var yyn100 bool = x.FptrMapUintBytes == nil
			var yyn102 bool = x.FptrMapUintUint == nil
			var yyn104 bool = x.FptrMapUintUint8 == nil
			var yyn106 bool = x.FptrMapUintUint64 == nil
			var yyn108 bool = x.FptrMapUintUintptr == nil
			var yyn110 bool = x.FptrMapUintInt == nil
			var yyn112 bool = x.FptrMapUintInt64 == nil
			var yyn114 bool = x.FptrMapUintFloat32 == nil
			var yyn116 bool = x.FptrMapUintFloat64 == nil
			var yyn118 bool = x.FptrMapUintBool == nil
			var yyn120 bool = x.FptrMapUint8Intf == nil
			var yyn122 bool = x.FptrMapUint8String == nil
			var yyn124 bool = x.FptrMapUint8Bytes == nil
			var yyn126 bool = x.FptrMapUint8Uint == nil
			var yyn128 bool = x.FptrMapUint8Uint8 == nil
			var yyn130 bool = x.FptrMapUint8Uint64 == nil
			var yyn132 bool = x.FptrMapUint8Uintptr == nil
			var yyn134 bool = x.FptrMapUint8Int == nil
			var yyn136 bool = x.FptrMapUint8Int64 == nil
			var yyn138 bool = x.FptrMapUint8Float32 == nil
			var yyn140 bool = x.FptrMapUint8Float64 == nil
			var yyn142 bool = x.FptrMapUint8Bool == nil
			var yyn144 bool = x.FptrMapUint64Intf == nil
			var yyn146 bool = x.FptrMapUint64String == nil
			var yyn148 bool = x.FptrMapUint64Bytes == nil
			var yyn150 bool = x.FptrMapUint64Uint == nil
			var yyn152 bool = x.FptrMapUint64Uint8 == nil
			var yyn154 bool = x.FptrMapUint64Uint64 == nil
			var yyn156 bool = x.FptrMapUint64Uintptr == nil
			var yyn158 bool = x.FptrMapUint64Int == nil
			var yyn160 bool = x.FptrMapUint64Int64 == nil
			var yyn162 bool = x.FptrMapUint64Float32 == nil
			var yyn164 bool = x.FptrMapUint64Float64 == nil
			var yyn166 bool = x.FptrMapUint64Bool == nil
			var yyn168 bool = x.FptrMapIntIntf == nil
			var yyn170 bool = x.FptrMapIntString == nil
			var yyn172 bool = x.FptrMapIntBytes == nil
			var yyn174 bool = x.FptrMapIntUint == nil
			var yyn176 bool = x.FptrMapIntUint8 == nil
			var yyn178 bool = x.FptrMapIntUint64 == nil
			var yyn180 bool = x.FptrMapIntUintptr == nil
			var yyn182 bool = x.FptrMapIntInt == nil
			var yyn184 bool = x.FptrMapIntInt64 == nil
			var yyn186 bool = x.FptrMapIntFloat32 == nil
			var yyn188 bool = x.FptrMapIntFloat64 == nil
			var yyn190 bool = x.FptrMapIntBool == nil
			var yyn192 bool = x.FptrMapInt64Intf == nil
			var yyn194 bool = x.FptrMapInt64String == nil
			var yyn196 bool = x.FptrMapInt64Bytes == nil
			var yyn198 bool = x.FptrMapInt64Uint == nil
			var yyn200 bool = x.FptrMapInt64Uint8 == nil
			var yyn202 bool = x.FptrMapInt64Uint64 == nil
			var yyn204 bool = x.FptrMapInt64Uintptr == nil
			var yyn206 bool = x.FptrMapInt64Int == nil
			var yyn208 bool = x.FptrMapInt64Int64 == nil
			var yyn210 bool = x.FptrMapInt64Float32 == nil
			var yyn212 bool = x.FptrMapInt64Float64 == nil
			var yyn214 bool = x.FptrMapInt64Bool == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(212)
				z.EncWriteArrayElem()
				z.EncFallback(x.FIntf)
				if yyn4 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy216 := *x.FptrIntf
					z.EncFallback(yy216)
				}
				z.EncWriteArrayElem()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.FString)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, string(x.FString))
				}
				if yyn6 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy219 := *x.FptrString
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(yy219)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF819781, string(yy219))
					}
				}
				z.EncWriteArrayElem()
				r.EncodeStringBytesRaw([]byte(x.FBytes))
				if yyn8 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy222 := *x.FptrBytes
					r.EncodeStringBytesRaw([]byte(yy222))
				}
				z.EncWriteArrayElem()
				r.EncodeFloat32(float32(x.FFloat32))
				if yyn10 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy225 := *x.FptrFloat32
					r.EncodeFloat32(float32(yy225))
				}
				z.EncWriteArrayElem()
				r.EncodeFloat64(float64(x.FFloat64))
				if yyn12 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy228 := *x.FptrFloat64
					r.EncodeFloat64(float64(yy228))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUint))
				if yyn14 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy231 := *x.FptrUint
					r.EncodeUint(uint64(yy231))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUint8))
				if yyn16 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy234 := *x.FptrUint8
					r.EncodeUint(uint64(yy234))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUint16))
				if yyn18 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy237 := *x.FptrUint16
					r.EncodeUint(uint64(yy237))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUint32))
				if yyn20 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy240 := *x.FptrUint32
					r.EncodeUint(uint64(yy240))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUint64))
				if yyn22 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy243 := *x.FptrUint64
					r.EncodeUint(uint64(yy243))
				}
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.FUintptr))
				if yyn24 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy246 := *x.FptrUintptr
					r.EncodeUint(uint64(yy246))
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.FInt))
				if yyn26 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy249 := *x.FptrInt
					r.EncodeInt(int64(yy249))
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.FInt8))
				if yyn28 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy252 := *x.FptrInt8
					r.EncodeInt(int64(yy252))
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.FInt16))
				if yyn30 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy255 := *x.FptrInt16
					r.EncodeInt(int64(yy255))
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.FInt32))
				if yyn32 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy258 := *x.FptrInt32
					r.EncodeInt(int64(yy258))
				}
				z.EncWriteArrayElem()
				r.EncodeInt(int64(x.FInt64))
				if yyn34 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy261 := *x.FptrInt64
					r.EncodeInt(int64(yy261))
				}
				z.EncWriteArrayElem()
				r.EncodeBool(bool(x.FBool))
				if yyn36 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy264 := *x.FptrBool
					r.EncodeBool(bool(yy264))
				}
				z.EncWriteArrayElem()
				z.F.EncSliceIntfV(x.FSliceIntf, e)
				if yyn38 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy267 := *x.FptrSliceIntf
					z.F.EncSliceIntfV(yy267, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceStringV(x.FSliceString, e)
				if yyn40 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy270 := *x.FptrSliceString
					z.F.EncSliceStringV(yy270, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceBytesV(x.FSliceBytes, e)
				if yyn42 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy273 := *x.FptrSliceBytes
					z.F.EncSliceBytesV(yy273, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceFloat32V(x.FSliceFloat32, e)
				if yyn44 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy276 := *x.FptrSliceFloat32
					z.F.EncSliceFloat32V(yy276, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceFloat64V(x.FSliceFloat64, e)
				if yyn46 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy279 := *x.FptrSliceFloat64
					z.F.EncSliceFloat64V(yy279, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceUintV(x.FSliceUint, e)
				if yyn48 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy282 := *x.FptrSliceUint
					z.F.EncSliceUintV(yy282, e)
				}
				z.EncWriteArrayElem()
				r.EncodeStringBytesRaw([]byte(x.FSliceUint8))
				if yyn50 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy285 := *x.FptrSliceUint8
					r.EncodeStringBytesRaw([]byte(yy285))
				}
				z.EncWriteArrayElem()
				z.F.EncSliceUint16V(x.FSliceUint16, e)
				if yyn52 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy288 := *x.FptrSliceUint16
					z.F.EncSliceUint16V(yy288, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceUint32V(x.FSliceUint32, e)
				if yyn54 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy291 := *x.FptrSliceUint32
					z.F.EncSliceUint32V(yy291, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceUint64V(x.FSliceUint64, e)
				if yyn56 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy294 := *x.FptrSliceUint64
					z.F.EncSliceUint64V(yy294, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceUintptrV(x.FSliceUintptr, e)
				if yyn58 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy297 := *x.FptrSliceUintptr
					z.F.EncSliceUintptrV(yy297, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceIntV(x.FSliceInt, e)
				if yyn60 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy300 := *x.FptrSliceInt
					z.F.EncSliceIntV(yy300, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceInt8V(x.FSliceInt8, e)
				if yyn62 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy303 := *x.FptrSliceInt8
					z.F.EncSliceInt8V(yy303, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceInt16V(x.FSliceInt16, e)
				if yyn64 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy306 := *x.FptrSliceInt16
					z.F.EncSliceInt16V(yy306, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceInt32V(x.FSliceInt32, e)
				if yyn66 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy309 := *x.FptrSliceInt32
					z.F.EncSliceInt32V(yy309, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceInt64V(x.FSliceInt64, e)
				if yyn68 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy312 := *x.FptrSliceInt64
					z.F.EncSliceInt64V(yy312, e)
				}
				z.EncWriteArrayElem()
				z.F.EncSliceBoolV(x.FSliceBool, e)
				if yyn70 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy315 := *x.FptrSliceBool
					z.F.EncSliceBoolV(yy315, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringIntfV(x.FMapStringIntf, e)
				if yyn72 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy318 := *x.FptrMapStringIntf
					z.F.EncMapStringIntfV(yy318, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringStringV(x.FMapStringString, e)
				if yyn74 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy321 := *x.FptrMapStringString
					z.F.EncMapStringStringV(yy321, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringBytesV(x.FMapStringBytes, e)
				if yyn76 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy324 := *x.FptrMapStringBytes
					z.F.EncMapStringBytesV(yy324, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringUintV(x.FMapStringUint, e)
				if yyn78 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy327 := *x.FptrMapStringUint
					z.F.EncMapStringUintV(yy327, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringUint8V(x.FMapStringUint8, e)
				if yyn80 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy330 := *x.FptrMapStringUint8
					z.F.EncMapStringUint8V(yy330, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringUint64V(x.FMapStringUint64, e)
				if yyn82 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy333 := *x.FptrMapStringUint64
					z.F.EncMapStringUint64V(yy333, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringUintptrV(x.FMapStringUintptr, e)
				if yyn84 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy336 := *x.FptrMapStringUintptr
					z.F.EncMapStringUintptrV(yy336, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringIntV(x.FMapStringInt, e)
				if yyn86 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy339 := *x.FptrMapStringInt
					z.F.EncMapStringIntV(yy339, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringInt64V(x.FMapStringInt64, e)
				if yyn88 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy342 := *x.FptrMapStringInt64
					z.F.EncMapStringInt64V(yy342, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringFloat32V(x.FMapStringFloat32, e)
				if yyn90 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy345 := *x.FptrMapStringFloat32
					z.F.EncMapStringFloat32V(yy345, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringFloat64V(x.FMapStringFloat64, e)
				if yyn92 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy348 := *x.FptrMapStringFloat64
					z.F.EncMapStringFloat64V(yy348, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapStringBoolV(x.FMapStringBool, e)
				if yyn94 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy351 := *x.FptrMapStringBool
					z.F.EncMapStringBoolV(yy351, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintIntfV(x.FMapUintIntf, e)
				if yyn96 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy354 := *x.FptrMapUintIntf
					z.F.EncMapUintIntfV(yy354, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintStringV(x.FMapUintString, e)
				if yyn98 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy357 := *x.FptrMapUintString
					z.F.EncMapUintStringV(yy357, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintBytesV(x.FMapUintBytes, e)
				if yyn100 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy360 := *x.FptrMapUintBytes
					z.F.EncMapUintBytesV(yy360, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintUintV(x.FMapUintUint, e)
				if yyn102 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy363 := *x.FptrMapUintUint
					z.F.EncMapUintUintV(yy363, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintUint8V(x.FMapUintUint8, e)
				if yyn104 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy366 := *x.FptrMapUintUint8
					z.F.EncMapUintUint8V(yy366, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintUint64V(x.FMapUintUint64, e)
				if yyn106 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy369 := *x.FptrMapUintUint64
					z.F.EncMapUintUint64V(yy369, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintUintptrV(x.FMapUintUintptr, e)
				if yyn108 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy372 := *x.FptrMapUintUintptr
					z.F.EncMapUintUintptrV(yy372, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintIntV(x.FMapUintInt, e)
				if yyn110 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy375 := *x.FptrMapUintInt
					z.F.EncMapUintIntV(yy375, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintInt64V(x.FMapUintInt64, e)
				if yyn112 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy378 := *x.FptrMapUintInt64
					z.F.EncMapUintInt64V(yy378, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintFloat32V(x.FMapUintFloat32, e)
				if yyn114 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy381 := *x.FptrMapUintFloat32
					z.F.EncMapUintFloat32V(yy381, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintFloat64V(x.FMapUintFloat64, e)
				if yyn116 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy384 := *x.FptrMapUintFloat64
					z.F.EncMapUintFloat64V(yy384, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUintBoolV(x.FMapUintBool, e)
				if yyn118 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy387 := *x.FptrMapUintBool
					z.F.EncMapUintBoolV(yy387, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8IntfV(x.FMapUint8Intf, e)
				if yyn120 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy390 := *x.FptrMapUint8Intf
					z.F.EncMapUint8IntfV(yy390, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8StringV(x.FMapUint8String, e)
				if yyn122 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy393 := *x.FptrMapUint8String
					z.F.EncMapUint8StringV(yy393, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8BytesV(x.FMapUint8Bytes, e)
				if yyn124 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy396 := *x.FptrMapUint8Bytes
					z.F.EncMapUint8BytesV(yy396, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8UintV(x.FMapUint8Uint, e)
				if yyn126 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy399 := *x.FptrMapUint8Uint
					z.F.EncMapUint8UintV(yy399, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8Uint8V(x.FMapUint8Uint8, e)
				if yyn128 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy402 := *x.FptrMapUint8Uint8
					z.F.EncMapUint8Uint8V(yy402, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8Uint64V(x.FMapUint8Uint64, e)
				if yyn130 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy405 := *x.FptrMapUint8Uint64
					z.F.EncMapUint8Uint64V(yy405, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8UintptrV(x.FMapUint8Uintptr, e)
				if yyn132 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy408 := *x.FptrMapUint8Uintptr
					z.F.EncMapUint8UintptrV(yy408, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8IntV(x.FMapUint8Int, e)
				if yyn134 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy411 := *x.FptrMapUint8Int
					z.F.EncMapUint8IntV(yy411, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8Int64V(x.FMapUint8Int64, e)
				if yyn136 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy414 := *x.FptrMapUint8Int64
					z.F.EncMapUint8Int64V(yy414, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8Float32V(x.FMapUint8Float32, e)
				if yyn138 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy417 := *x.FptrMapUint8Float32
					z.F.EncMapUint8Float32V(yy417, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8Float64V(x.FMapUint8Float64, e)
				if yyn140 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy420 := *x.FptrMapUint8Float64
					z.F.EncMapUint8Float64V(yy420, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint8BoolV(x.FMapUint8Bool, e)
				if yyn142 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy423 := *x.FptrMapUint8Bool
					z.F.EncMapUint8BoolV(yy423, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64IntfV(x.FMapUint64Intf, e)
				if yyn144 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy426 := *x.FptrMapUint64Intf
					z.F.EncMapUint64IntfV(yy426, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64StringV(x.FMapUint64String, e)
				if yyn146 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy429 := *x.FptrMapUint64String
					z.F.EncMapUint64StringV(yy429, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64BytesV(x.FMapUint64Bytes, e)
				if yyn148 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy432 := *x.FptrMapUint64Bytes
					z.F.EncMapUint64BytesV(yy432, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64UintV(x.FMapUint64Uint, e)
				if yyn150 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy435 := *x.FptrMapUint64Uint
					z.F.EncMapUint64UintV(yy435, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64Uint8V(x.FMapUint64Uint8, e)
				if yyn152 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy438 := *x.FptrMapUint64Uint8
					z.F.EncMapUint64Uint8V(yy438, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64Uint64V(x.FMapUint64Uint64, e)
				if yyn154 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy441 := *x.FptrMapUint64Uint64
					z.F.EncMapUint64Uint64V(yy441, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64UintptrV(x.FMapUint64Uintptr, e)
				if yyn156 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy444 := *x.FptrMapUint64Uintptr
					z.F.EncMapUint64UintptrV(yy444, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64IntV(x.FMapUint64Int, e)
				if yyn158 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy447 := *x.FptrMapUint64Int
					z.F.EncMapUint64IntV(yy447, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64Int64V(x.FMapUint64Int64, e)
				if yyn160 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy450 := *x.FptrMapUint64Int64
					z.F.EncMapUint64Int64V(yy450, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64Float32V(x.FMapUint64Float32, e)
				if yyn162 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy453 := *x.FptrMapUint64Float32
					z.F.EncMapUint64Float32V(yy453, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64Float64V(x.FMapUint64Float64, e)
				if yyn164 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy456 := *x.FptrMapUint64Float64
					z.F.EncMapUint64Float64V(yy456, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapUint64BoolV(x.FMapUint64Bool, e)
				if yyn166 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy459 := *x.FptrMapUint64Bool
					z.F.EncMapUint64BoolV(yy459, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntIntfV(x.FMapIntIntf, e)
				if yyn168 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy462 := *x.FptrMapIntIntf
					z.F.EncMapIntIntfV(yy462, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntStringV(x.FMapIntString, e)
				if yyn170 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy465 := *x.FptrMapIntString
					z.F.EncMapIntStringV(yy465, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntBytesV(x.FMapIntBytes, e)
				if yyn172 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy468 := *x.FptrMapIntBytes
					z.F.EncMapIntBytesV(yy468, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntUintV(x.FMapIntUint, e)
				if yyn174 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy471 := *x.FptrMapIntUint
					z.F.EncMapIntUintV(yy471, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntUint8V(x.FMapIntUint8, e)
				if yyn176 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy474 := *x.FptrMapIntUint8
					z.F.EncMapIntUint8V(yy474, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntUint64V(x.FMapIntUint64, e)
				if yyn178 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy477 := *x.FptrMapIntUint64
					z.F.EncMapIntUint64V(yy477, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntUintptrV(x.FMapIntUintptr, e)
				if yyn180 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy480 := *x.FptrMapIntUintptr
					z.F.EncMapIntUintptrV(yy480, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntIntV(x.FMapIntInt, e)
				if yyn182 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy483 := *x.FptrMapIntInt
					z.F.EncMapIntIntV(yy483, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntInt64V(x.FMapIntInt64, e)
				if yyn184 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy486 := *x.FptrMapIntInt64
					z.F.EncMapIntInt64V(yy486, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntFloat32V(x.FMapIntFloat32, e)
				if yyn186 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy489 := *x.FptrMapIntFloat32
					z.F.EncMapIntFloat32V(yy489, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntFloat64V(x.FMapIntFloat64, e)
				if yyn188 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy492 := *x.FptrMapIntFloat64
					z.F.EncMapIntFloat64V(yy492, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapIntBoolV(x.FMapIntBool, e)
				if yyn190 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy495 := *x.FptrMapIntBool
					z.F.EncMapIntBoolV(yy495, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64IntfV(x.FMapInt64Intf, e)
				if yyn192 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy498 := *x.FptrMapInt64Intf
					z.F.EncMapInt64IntfV(yy498, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64StringV(x.FMapInt64String, e)
				if yyn194 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy501 := *x.FptrMapInt64String
					z.F.EncMapInt64StringV(yy501, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64BytesV(x.FMapInt64Bytes, e)
				if yyn196 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy504 := *x.FptrMapInt64Bytes
					z.F.EncMapInt64BytesV(yy504, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64UintV(x.FMapInt64Uint, e)
				if yyn198 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy507 := *x.FptrMapInt64Uint
					z.F.EncMapInt64UintV(yy507, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64Uint8V(x.FMapInt64Uint8, e)
				if yyn200 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy510 := *x.FptrMapInt64Uint8
					z.F.EncMapInt64Uint8V(yy510, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64Uint64V(x.FMapInt64Uint64, e)
				if yyn202 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy513 := *x.FptrMapInt64Uint64
					z.F.EncMapInt64Uint64V(yy513, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64UintptrV(x.FMapInt64Uintptr, e)
				if yyn204 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy516 := *x.FptrMapInt64Uintptr
					z.F.EncMapInt64UintptrV(yy516, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64IntV(x.FMapInt64Int, e)
				if yyn206 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy519 := *x.FptrMapInt64Int
					z.F.EncMapInt64IntV(yy519, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64Int64V(x.FMapInt64Int64, e)
				if yyn208 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy522 := *x.FptrMapInt64Int64
					z.F.EncMapInt64Int64V(yy522, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64Float32V(x.FMapInt64Float32, e)
				if yyn210 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy525 := *x.FptrMapInt64Float32
					z.F.EncMapInt64Float32V(yy525, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64Float64V(x.FMapInt64Float64, e)
				if yyn212 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy528 := *x.FptrMapInt64Float64
					z.F.EncMapInt64Float64V(yy528, e)
				}
				z.EncWriteArrayElem()
				z.F.EncMapInt64BoolV(x.FMapInt64Bool, e)
				if yyn214 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					yy531 := *x.FptrMapInt64Bool
					z.F.EncMapInt64BoolV(yy531, e)
				}
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(212)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FIntf`)
				}
				z.EncWriteMapElemValue()
				z.EncFallback(x.FIntf)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrIntf`)
				}
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					yy534 := *x.FptrIntf
					z.EncFallback(yy534)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FString`)
				}
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.FString)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, string(x.FString))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrString`)
				}
				z.EncWriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					yy537 := *x.FptrString
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(yy537)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF819781, string(yy537))
					}
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FBytes`)
				}
				z.EncWriteMapElemValue()
				r.EncodeStringBytesRaw([]byte(x.FBytes))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrBytes`)
				}
				z.EncWriteMapElemValue()
				if yyn8 {
					r.EncodeNil()
				} else {
					yy540 := *x.FptrBytes
					r.EncodeStringBytesRaw([]byte(yy540))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FFloat32`)
				}
				z.EncWriteMapElemValue()
				r.EncodeFloat32(float32(x.FFloat32))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrFloat32`)
				}
				z.EncWriteMapElemValue()
				if yyn10 {
					r.EncodeNil()
				} else {
					yy543 := *x.FptrFloat32
					r.EncodeFloat32(float32(yy543))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FFloat64`)
				}
				z.EncWriteMapElemValue()
				r.EncodeFloat64(float64(x.FFloat64))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrFloat64`)
				}
				z.EncWriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					yy546 := *x.FptrFloat64
					r.EncodeFloat64(float64(yy546))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUint))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint`)
				}
				z.EncWriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					yy549 := *x.FptrUint
					r.EncodeUint(uint64(yy549))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint8`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUint8))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint8`)
				}
				z.EncWriteMapElemValue()
				if yyn16 {
					r.EncodeNil()
				} else {
					yy552 := *x.FptrUint8
					r.EncodeUint(uint64(yy552))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint16`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUint16))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint16`)
				}
				z.EncWriteMapElemValue()
				if yyn18 {
					r.EncodeNil()
				} else {
					yy555 := *x.FptrUint16
					r.EncodeUint(uint64(yy555))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint32`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUint32))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint32`)
				}
				z.EncWriteMapElemValue()
				if yyn20 {
					r.EncodeNil()
				} else {
					yy558 := *x.FptrUint32
					r.EncodeUint(uint64(yy558))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint64`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUint64))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint64`)
				}
				z.EncWriteMapElemValue()
				if yyn22 {
					r.EncodeNil()
				} else {
					yy561 := *x.FptrUint64
					r.EncodeUint(uint64(yy561))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUintptr`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.FUintptr))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn24 {
					r.EncodeNil()
				} else {
					yy564 := *x.FptrUintptr
					r.EncodeUint(uint64(yy564))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.FInt))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt`)
				}
				z.EncWriteMapElemValue()
				if yyn26 {
					r.EncodeNil()
				} else {
					yy567 := *x.FptrInt
					r.EncodeInt(int64(yy567))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt8`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.FInt8))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt8`)
				}
				z.EncWriteMapElemValue()
				if yyn28 {
					r.EncodeNil()
				} else {
					yy570 := *x.FptrInt8
					r.EncodeInt(int64(yy570))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt16`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.FInt16))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt16`)
				}
				z.EncWriteMapElemValue()
				if yyn30 {
					r.EncodeNil()
				} else {
					yy573 := *x.FptrInt16
					r.EncodeInt(int64(yy573))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt32`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.FInt32))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt32`)
				}
				z.EncWriteMapElemValue()
				if yyn32 {
					r.EncodeNil()
				} else {
					yy576 := *x.FptrInt32
					r.EncodeInt(int64(yy576))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt64`)
				}
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.FInt64))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt64`)
				}
				z.EncWriteMapElemValue()
				if yyn34 {
					r.EncodeNil()
				} else {
					yy579 := *x.FptrInt64
					r.EncodeInt(int64(yy579))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FBool`)
				}
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.FBool))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrBool`)
				}
				z.EncWriteMapElemValue()
				if yyn36 {
					r.EncodeNil()
				} else {
					yy582 := *x.FptrBool
					r.EncodeBool(bool(yy582))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceIntf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceIntfV(x.FSliceIntf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceIntf`)
				}
				z.EncWriteMapElemValue()
				if yyn38 {
					r.EncodeNil()
				} else {
					yy585 := *x.FptrSliceIntf
					z.F.EncSliceIntfV(yy585, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceString`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceStringV(x.FSliceString, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceString`)
				}
				z.EncWriteMapElemValue()
				if yyn40 {
					r.EncodeNil()
				} else {
					yy588 := *x.FptrSliceString
					z.F.EncSliceStringV(yy588, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceBytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceBytesV(x.FSliceBytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceBytes`)
				}
				z.EncWriteMapElemValue()
				if yyn42 {
					r.EncodeNil()
				} else {
					yy591 := *x.FptrSliceBytes
					z.F.EncSliceBytesV(yy591, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceFloat32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceFloat32V(x.FSliceFloat32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceFloat32`)
				}
				z.EncWriteMapElemValue()
				if yyn44 {
					r.EncodeNil()
				} else {
					yy594 := *x.FptrSliceFloat32
					z.F.EncSliceFloat32V(yy594, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceFloat64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceFloat64V(x.FSliceFloat64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceFloat64`)
				}
				z.EncWriteMapElemValue()
				if yyn46 {
					r.EncodeNil()
				} else {
					yy597 := *x.FptrSliceFloat64
					z.F.EncSliceFloat64V(yy597, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceUintV(x.FSliceUint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint`)
				}
				z.EncWriteMapElemValue()
				if yyn48 {
					r.EncodeNil()
				} else {
					yy600 := *x.FptrSliceUint
					z.F.EncSliceUintV(yy600, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint8`)
				}
				z.EncWriteMapElemValue()
				r.EncodeStringBytesRaw([]byte(x.FSliceUint8))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint8`)
				}
				z.EncWriteMapElemValue()
				if yyn50 {
					r.EncodeNil()
				} else {
					yy603 := *x.FptrSliceUint8
					r.EncodeStringBytesRaw([]byte(yy603))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint16`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceUint16V(x.FSliceUint16, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint16`)
				}
				z.EncWriteMapElemValue()
				if yyn52 {
					r.EncodeNil()
				} else {
					yy606 := *x.FptrSliceUint16
					z.F.EncSliceUint16V(yy606, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceUint32V(x.FSliceUint32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint32`)
				}
				z.EncWriteMapElemValue()
				if yyn54 {
					r.EncodeNil()
				} else {
					yy609 := *x.FptrSliceUint32
					z.F.EncSliceUint32V(yy609, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceUint64V(x.FSliceUint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint64`)
				}
				z.EncWriteMapElemValue()
				if yyn56 {
					r.EncodeNil()
				} else {
					yy612 := *x.FptrSliceUint64
					z.F.EncSliceUint64V(yy612, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceUintptrV(x.FSliceUintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn58 {
					r.EncodeNil()
				} else {
					yy615 := *x.FptrSliceUintptr
					z.F.EncSliceUintptrV(yy615, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceIntV(x.FSliceInt, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt`)
				}
				z.EncWriteMapElemValue()
				if yyn60 {
					r.EncodeNil()
				} else {
					yy618 := *x.FptrSliceInt
					z.F.EncSliceIntV(yy618, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceInt8V(x.FSliceInt8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt8`)
				}
				z.EncWriteMapElemValue()
				if yyn62 {
					r.EncodeNil()
				} else {
					yy621 := *x.FptrSliceInt8
					z.F.EncSliceInt8V(yy621, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt16`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceInt16V(x.FSliceInt16, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt16`)
				}
				z.EncWriteMapElemValue()
				if yyn64 {
					r.EncodeNil()
				} else {
					yy624 := *x.FptrSliceInt16
					z.F.EncSliceInt16V(yy624, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceInt32V(x.FSliceInt32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt32`)
				}
				z.EncWriteMapElemValue()
				if yyn66 {
					r.EncodeNil()
				} else {
					yy627 := *x.FptrSliceInt32
					z.F.EncSliceInt32V(yy627, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceInt64V(x.FSliceInt64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt64`)
				}
				z.EncWriteMapElemValue()
				if yyn68 {
					r.EncodeNil()
				} else {
					yy630 := *x.FptrSliceInt64
					z.F.EncSliceInt64V(yy630, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceBool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncSliceBoolV(x.FSliceBool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceBool`)
				}
				z.EncWriteMapElemValue()
				if yyn70 {
					r.EncodeNil()
				} else {
					yy633 := *x.FptrSliceBool
					z.F.EncSliceBoolV(yy633, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringIntf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringIntfV(x.FMapStringIntf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringIntf`)
				}
				z.EncWriteMapElemValue()
				if yyn72 {
					r.EncodeNil()
				} else {
					yy636 := *x.FptrMapStringIntf
					z.F.EncMapStringIntfV(yy636, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringString`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringStringV(x.FMapStringString, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringString`)
				}
				z.EncWriteMapElemValue()
				if yyn74 {
					r.EncodeNil()
				} else {
					yy639 := *x.FptrMapStringString
					z.F.EncMapStringStringV(yy639, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringBytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringBytesV(x.FMapStringBytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringBytes`)
				}
				z.EncWriteMapElemValue()
				if yyn76 {
					r.EncodeNil()
				} else {
					yy642 := *x.FptrMapStringBytes
					z.F.EncMapStringBytesV(yy642, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringUintV(x.FMapStringUint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint`)
				}
				z.EncWriteMapElemValue()
				if yyn78 {
					r.EncodeNil()
				} else {
					yy645 := *x.FptrMapStringUint
					z.F.EncMapStringUintV(yy645, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringUint8V(x.FMapStringUint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint8`)
				}
				z.EncWriteMapElemValue()
				if yyn80 {
					r.EncodeNil()
				} else {
					yy648 := *x.FptrMapStringUint8
					z.F.EncMapStringUint8V(yy648, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringUint64V(x.FMapStringUint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint64`)
				}
				z.EncWriteMapElemValue()
				if yyn82 {
					r.EncodeNil()
				} else {
					yy651 := *x.FptrMapStringUint64
					z.F.EncMapStringUint64V(yy651, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringUintptrV(x.FMapStringUintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn84 {
					r.EncodeNil()
				} else {
					yy654 := *x.FptrMapStringUintptr
					z.F.EncMapStringUintptrV(yy654, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringIntV(x.FMapStringInt, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt`)
				}
				z.EncWriteMapElemValue()
				if yyn86 {
					r.EncodeNil()
				} else {
					yy657 := *x.FptrMapStringInt
					z.F.EncMapStringIntV(yy657, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringInt64V(x.FMapStringInt64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt64`)
				}
				z.EncWriteMapElemValue()
				if yyn88 {
					r.EncodeNil()
				} else {
					yy660 := *x.FptrMapStringInt64
					z.F.EncMapStringInt64V(yy660, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringFloat32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringFloat32V(x.FMapStringFloat32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringFloat32`)
				}
				z.EncWriteMapElemValue()
				if yyn90 {
					r.EncodeNil()
				} else {
					yy663 := *x.FptrMapStringFloat32
					z.F.EncMapStringFloat32V(yy663, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringFloat64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringFloat64V(x.FMapStringFloat64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringFloat64`)
				}
				z.EncWriteMapElemValue()
				if yyn92 {
					r.EncodeNil()
				} else {
					yy666 := *x.FptrMapStringFloat64
					z.F.EncMapStringFloat64V(yy666, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringBool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapStringBoolV(x.FMapStringBool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringBool`)
				}
				z.EncWriteMapElemValue()
				if yyn94 {
					r.EncodeNil()
				} else {
					yy669 := *x.FptrMapStringBool
					z.F.EncMapStringBoolV(yy669, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintIntf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintIntfV(x.FMapUintIntf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintIntf`)
				}
				z.EncWriteMapElemValue()
				if yyn96 {
					r.EncodeNil()
				} else {
					yy672 := *x.FptrMapUintIntf
					z.F.EncMapUintIntfV(yy672, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintString`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintStringV(x.FMapUintString, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintString`)
				}
				z.EncWriteMapElemValue()
				if yyn98 {
					r.EncodeNil()
				} else {
					yy675 := *x.FptrMapUintString
					z.F.EncMapUintStringV(yy675, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintBytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintBytesV(x.FMapUintBytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintBytes`)
				}
				z.EncWriteMapElemValue()
				if yyn100 {
					r.EncodeNil()
				} else {
					yy678 := *x.FptrMapUintBytes
					z.F.EncMapUintBytesV(yy678, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintUintV(x.FMapUintUint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint`)
				}
				z.EncWriteMapElemValue()
				if yyn102 {
					r.EncodeNil()
				} else {
					yy681 := *x.FptrMapUintUint
					z.F.EncMapUintUintV(yy681, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintUint8V(x.FMapUintUint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint8`)
				}
				z.EncWriteMapElemValue()
				if yyn104 {
					r.EncodeNil()
				} else {
					yy684 := *x.FptrMapUintUint8
					z.F.EncMapUintUint8V(yy684, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintUint64V(x.FMapUintUint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint64`)
				}
				z.EncWriteMapElemValue()
				if yyn106 {
					r.EncodeNil()
				} else {
					yy687 := *x.FptrMapUintUint64
					z.F.EncMapUintUint64V(yy687, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintUintptrV(x.FMapUintUintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn108 {
					r.EncodeNil()
				} else {
					yy690 := *x.FptrMapUintUintptr
					z.F.EncMapUintUintptrV(yy690, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintIntV(x.FMapUintInt, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt`)
				}
				z.EncWriteMapElemValue()
				if yyn110 {
					r.EncodeNil()
				} else {
					yy693 := *x.FptrMapUintInt
					z.F.EncMapUintIntV(yy693, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintInt64V(x.FMapUintInt64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt64`)
				}
				z.EncWriteMapElemValue()
				if yyn112 {
					r.EncodeNil()
				} else {
					yy696 := *x.FptrMapUintInt64
					z.F.EncMapUintInt64V(yy696, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintFloat32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintFloat32V(x.FMapUintFloat32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintFloat32`)
				}
				z.EncWriteMapElemValue()
				if yyn114 {
					r.EncodeNil()
				} else {
					yy699 := *x.FptrMapUintFloat32
					z.F.EncMapUintFloat32V(yy699, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintFloat64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintFloat64V(x.FMapUintFloat64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintFloat64`)
				}
				z.EncWriteMapElemValue()
				if yyn116 {
					r.EncodeNil()
				} else {
					yy702 := *x.FptrMapUintFloat64
					z.F.EncMapUintFloat64V(yy702, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintBool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUintBoolV(x.FMapUintBool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintBool`)
				}
				z.EncWriteMapElemValue()
				if yyn118 {
					r.EncodeNil()
				} else {
					yy705 := *x.FptrMapUintBool
					z.F.EncMapUintBoolV(yy705, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Intf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8IntfV(x.FMapUint8Intf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Intf`)
				}
				z.EncWriteMapElemValue()
				if yyn120 {
					r.EncodeNil()
				} else {
					yy708 := *x.FptrMapUint8Intf
					z.F.EncMapUint8IntfV(yy708, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8String`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8StringV(x.FMapUint8String, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8String`)
				}
				z.EncWriteMapElemValue()
				if yyn122 {
					r.EncodeNil()
				} else {
					yy711 := *x.FptrMapUint8String
					z.F.EncMapUint8StringV(yy711, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Bytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8BytesV(x.FMapUint8Bytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Bytes`)
				}
				z.EncWriteMapElemValue()
				if yyn124 {
					r.EncodeNil()
				} else {
					yy714 := *x.FptrMapUint8Bytes
					z.F.EncMapUint8BytesV(yy714, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8UintV(x.FMapUint8Uint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint`)
				}
				z.EncWriteMapElemValue()
				if yyn126 {
					r.EncodeNil()
				} else {
					yy717 := *x.FptrMapUint8Uint
					z.F.EncMapUint8UintV(yy717, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8Uint8V(x.FMapUint8Uint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint8`)
				}
				z.EncWriteMapElemValue()
				if yyn128 {
					r.EncodeNil()
				} else {
					yy720 := *x.FptrMapUint8Uint8
					z.F.EncMapUint8Uint8V(yy720, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8Uint64V(x.FMapUint8Uint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint64`)
				}
				z.EncWriteMapElemValue()
				if yyn130 {
					r.EncodeNil()
				} else {
					yy723 := *x.FptrMapUint8Uint64
					z.F.EncMapUint8Uint64V(yy723, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8UintptrV(x.FMapUint8Uintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn132 {
					r.EncodeNil()
				} else {
					yy726 := *x.FptrMapUint8Uintptr
					z.F.EncMapUint8UintptrV(yy726, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8IntV(x.FMapUint8Int, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int`)
				}
				z.EncWriteMapElemValue()
				if yyn134 {
					r.EncodeNil()
				} else {
					yy729 := *x.FptrMapUint8Int
					z.F.EncMapUint8IntV(yy729, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8Int64V(x.FMapUint8Int64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int64`)
				}
				z.EncWriteMapElemValue()
				if yyn136 {
					r.EncodeNil()
				} else {
					yy732 := *x.FptrMapUint8Int64
					z.F.EncMapUint8Int64V(yy732, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Float32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8Float32V(x.FMapUint8Float32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Float32`)
				}
				z.EncWriteMapElemValue()
				if yyn138 {
					r.EncodeNil()
				} else {
					yy735 := *x.FptrMapUint8Float32
					z.F.EncMapUint8Float32V(yy735, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Float64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8Float64V(x.FMapUint8Float64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Float64`)
				}
				z.EncWriteMapElemValue()
				if yyn140 {
					r.EncodeNil()
				} else {
					yy738 := *x.FptrMapUint8Float64
					z.F.EncMapUint8Float64V(yy738, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Bool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint8BoolV(x.FMapUint8Bool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Bool`)
				}
				z.EncWriteMapElemValue()
				if yyn142 {
					r.EncodeNil()
				} else {
					yy741 := *x.FptrMapUint8Bool
					z.F.EncMapUint8BoolV(yy741, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Intf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64IntfV(x.FMapUint64Intf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Intf`)
				}
				z.EncWriteMapElemValue()
				if yyn144 {
					r.EncodeNil()
				} else {
					yy744 := *x.FptrMapUint64Intf
					z.F.EncMapUint64IntfV(yy744, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64String`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64StringV(x.FMapUint64String, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64String`)
				}
				z.EncWriteMapElemValue()
				if yyn146 {
					r.EncodeNil()
				} else {
					yy747 := *x.FptrMapUint64String
					z.F.EncMapUint64StringV(yy747, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Bytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64BytesV(x.FMapUint64Bytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Bytes`)
				}
				z.EncWriteMapElemValue()
				if yyn148 {
					r.EncodeNil()
				} else {
					yy750 := *x.FptrMapUint64Bytes
					z.F.EncMapUint64BytesV(yy750, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64UintV(x.FMapUint64Uint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint`)
				}
				z.EncWriteMapElemValue()
				if yyn150 {
					r.EncodeNil()
				} else {
					yy753 := *x.FptrMapUint64Uint
					z.F.EncMapUint64UintV(yy753, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64Uint8V(x.FMapUint64Uint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint8`)
				}
				z.EncWriteMapElemValue()
				if yyn152 {
					r.EncodeNil()
				} else {
					yy756 := *x.FptrMapUint64Uint8
					z.F.EncMapUint64Uint8V(yy756, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64Uint64V(x.FMapUint64Uint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint64`)
				}
				z.EncWriteMapElemValue()
				if yyn154 {
					r.EncodeNil()
				} else {
					yy759 := *x.FptrMapUint64Uint64
					z.F.EncMapUint64Uint64V(yy759, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64UintptrV(x.FMapUint64Uintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn156 {
					r.EncodeNil()
				} else {
					yy762 := *x.FptrMapUint64Uintptr
					z.F.EncMapUint64UintptrV(yy762, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64IntV(x.FMapUint64Int, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int`)
				}
				z.EncWriteMapElemValue()
				if yyn158 {
					r.EncodeNil()
				} else {
					yy765 := *x.FptrMapUint64Int
					z.F.EncMapUint64IntV(yy765, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64Int64V(x.FMapUint64Int64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int64`)
				}
				z.EncWriteMapElemValue()
				if yyn160 {
					r.EncodeNil()
				} else {
					yy768 := *x.FptrMapUint64Int64
					z.F.EncMapUint64Int64V(yy768, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Float32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64Float32V(x.FMapUint64Float32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Float32`)
				}
				z.EncWriteMapElemValue()
				if yyn162 {
					r.EncodeNil()
				} else {
					yy771 := *x.FptrMapUint64Float32
					z.F.EncMapUint64Float32V(yy771, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Float64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64Float64V(x.FMapUint64Float64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Float64`)
				}
				z.EncWriteMapElemValue()
				if yyn164 {
					r.EncodeNil()
				} else {
					yy774 := *x.FptrMapUint64Float64
					z.F.EncMapUint64Float64V(yy774, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Bool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapUint64BoolV(x.FMapUint64Bool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Bool`)
				}
				z.EncWriteMapElemValue()
				if yyn166 {
					r.EncodeNil()
				} else {
					yy777 := *x.FptrMapUint64Bool
					z.F.EncMapUint64BoolV(yy777, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntIntf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntIntfV(x.FMapIntIntf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntIntf`)
				}
				z.EncWriteMapElemValue()
				if yyn168 {
					r.EncodeNil()
				} else {
					yy780 := *x.FptrMapIntIntf
					z.F.EncMapIntIntfV(yy780, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntString`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntStringV(x.FMapIntString, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntString`)
				}
				z.EncWriteMapElemValue()
				if yyn170 {
					r.EncodeNil()
				} else {
					yy783 := *x.FptrMapIntString
					z.F.EncMapIntStringV(yy783, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntBytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntBytesV(x.FMapIntBytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntBytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntBytes`)
				}
				z.EncWriteMapElemValue()
				if yyn172 {
					r.EncodeNil()
				} else {
					yy786 := *x.FptrMapIntBytes
					z.F.EncMapIntBytesV(yy786, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntUintV(x.FMapIntUint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint`)
				}
				z.EncWriteMapElemValue()
				if yyn174 {
					r.EncodeNil()
				} else {
					yy789 := *x.FptrMapIntUint
					z.F.EncMapIntUintV(yy789, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntUint8V(x.FMapIntUint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint8`)
				}
				z.EncWriteMapElemValue()
				if yyn176 {
					r.EncodeNil()
				} else {
					yy792 := *x.FptrMapIntUint8
					z.F.EncMapIntUint8V(yy792, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntUint64V(x.FMapIntUint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint64`)
				}
				z.EncWriteMapElemValue()
				if yyn178 {
					r.EncodeNil()
				} else {
					yy795 := *x.FptrMapIntUint64
					z.F.EncMapIntUint64V(yy795, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntUintptrV(x.FMapIntUintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn180 {
					r.EncodeNil()
				} else {
					yy798 := *x.FptrMapIntUintptr
					z.F.EncMapIntUintptrV(yy798, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntIntV(x.FMapIntInt, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt`)
				}
				z.EncWriteMapElemValue()
				if yyn182 {
					r.EncodeNil()
				} else {
					yy801 := *x.FptrMapIntInt
					z.F.EncMapIntIntV(yy801, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntInt64V(x.FMapIntInt64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt64`)
				}
				z.EncWriteMapElemValue()
				if yyn184 {
					r.EncodeNil()
				} else {
					yy804 := *x.FptrMapIntInt64
					z.F.EncMapIntInt64V(yy804, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntFloat32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntFloat32V(x.FMapIntFloat32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntFloat32`)
				}
				z.EncWriteMapElemValue()
				if yyn186 {
					r.EncodeNil()
				} else {
					yy807 := *x.FptrMapIntFloat32
					z.F.EncMapIntFloat32V(yy807, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntFloat64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntFloat64V(x.FMapIntFloat64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntFloat64`)
				}
				z.EncWriteMapElemValue()
				if yyn188 {
					r.EncodeNil()
				} else {
					yy810 := *x.FptrMapIntFloat64
					z.F.EncMapIntFloat64V(yy810, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntBool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapIntBoolV(x.FMapIntBool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntBool`)
				}
				z.EncWriteMapElemValue()
				if yyn190 {
					r.EncodeNil()
				} else {
					yy813 := *x.FptrMapIntBool
					z.F.EncMapIntBoolV(yy813, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Intf`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64IntfV(x.FMapInt64Intf, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Intf`)
				}
				z.EncWriteMapElemValue()
				if yyn192 {
					r.EncodeNil()
				} else {
					yy816 := *x.FptrMapInt64Intf
					z.F.EncMapInt64IntfV(yy816, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64String`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64StringV(x.FMapInt64String, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64String`)
				}
				z.EncWriteMapElemValue()
				if yyn194 {
					r.EncodeNil()
				} else {
					yy819 := *x.FptrMapInt64String
					z.F.EncMapInt64StringV(yy819, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Bytes`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64BytesV(x.FMapInt64Bytes, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Bytes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Bytes`)
				}
				z.EncWriteMapElemValue()
				if yyn196 {
					r.EncodeNil()
				} else {
					yy822 := *x.FptrMapInt64Bytes
					z.F.EncMapInt64BytesV(yy822, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64UintV(x.FMapInt64Uint, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint`)
				}
				z.EncWriteMapElemValue()
				if yyn198 {
					r.EncodeNil()
				} else {
					yy825 := *x.FptrMapInt64Uint
					z.F.EncMapInt64UintV(yy825, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint8`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64Uint8V(x.FMapInt64Uint8, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint8`)
				}
				z.EncWriteMapElemValue()
				if yyn200 {
					r.EncodeNil()
				} else {
					yy828 := *x.FptrMapInt64Uint8
					z.F.EncMapInt64Uint8V(yy828, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64Uint64V(x.FMapInt64Uint64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint64`)
				}
				z.EncWriteMapElemValue()
				if yyn202 {
					r.EncodeNil()
				} else {
					yy831 := *x.FptrMapInt64Uint64
					z.F.EncMapInt64Uint64V(yy831, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uintptr`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64UintptrV(x.FMapInt64Uintptr, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uintptr`)
				}
				z.EncWriteMapElemValue()
				if yyn204 {
					r.EncodeNil()
				} else {
					yy834 := *x.FptrMapInt64Uintptr
					z.F.EncMapInt64UintptrV(yy834, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64IntV(x.FMapInt64Int, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int`)
				}
				z.EncWriteMapElemValue()
				if yyn206 {
					r.EncodeNil()
				} else {
					yy837 := *x.FptrMapInt64Int
					z.F.EncMapInt64IntV(yy837, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64Int64V(x.FMapInt64Int64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int64`)
				}
				z.EncWriteMapElemValue()
				if yyn208 {
					r.EncodeNil()
				} else {
					yy840 := *x.FptrMapInt64Int64
					z.F.EncMapInt64Int64V(yy840, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Float32`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64Float32V(x.FMapInt64Float32, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Float32`)
				}
				z.EncWriteMapElemValue()
				if yyn210 {
					r.EncodeNil()
				} else {
					yy843 := *x.FptrMapInt64Float32
					z.F.EncMapInt64Float32V(yy843, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Float64`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64Float64V(x.FMapInt64Float64, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Float64`)
				}
				z.EncWriteMapElemValue()
				if yyn212 {
					r.EncodeNil()
				} else {
					yy846 := *x.FptrMapInt64Float64
					z.F.EncMapInt64Float64V(yy846, e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Bool`)
				}
				z.EncWriteMapElemValue()
				z.F.EncMapInt64BoolV(x.FMapInt64Bool, e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Bool`)
				}
				z.EncWriteMapElemValue()
				if yyn214 {
					r.EncodeNil()
				} else {
					yy849 := *x.FptrMapInt64Bool
					z.F.EncMapInt64BoolV(yy849, e)
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *TestMammoth2) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap19781 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
				z.DecReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray19781 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 == 0 {
				z.DecReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct19781)
		}
	}
}

func (x *TestMammoth2) codecDecodeSelfFromMap(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "FIntf":
			if r.TryDecodeAsNil() {
				x.FIntf = nil
			} else {
				z.DecFallback(&x.FIntf, true)
			}
		case "FptrIntf":
			if r.TryDecodeAsNil() {
				if x.FptrIntf != nil { // remove the if-true
					x.FptrIntf = nil
				}
			} else {
				if x.FptrIntf == nil {
					x.FptrIntf = new(interface{})
				}

				z.DecFallback(x.FptrIntf, true)
			}
		case "FString":
			if r.TryDecodeAsNil() {
				x.FString = ""
			} else {
				x.FString = (string)(r.DecodeString())
			}
		case "FptrString":
			if r.TryDecodeAsNil() {
				if x.FptrString != nil { // remove the if-true
					x.FptrString = nil
				}
			} else {
				if x.FptrString == nil {
					x.FptrString = new(string)
				}

				*x.FptrString = (string)(r.DecodeString())
			}
		case "FBytes":
			if r.TryDecodeAsNil() {
				x.FBytes = nil
			} else {
				x.FBytes = r.DecodeBytes(([]byte)(x.FBytes), false)
			}
		case "FptrBytes":
			if r.TryDecodeAsNil() {
				if x.FptrBytes != nil { // remove the if-true
					x.FptrBytes = nil
				}
			} else {
				if x.FptrBytes == nil {
					x.FptrBytes = new([]uint8)
				}

				*x.FptrBytes = r.DecodeBytes(*(*[]byte)(x.FptrBytes), false)
			}
		case "FFloat32":
			if r.TryDecodeAsNil() {
				x.FFloat32 = 0
			} else {
				x.FFloat32 = (float32)(z.DecDecodeFloat32())
			}
		case "FptrFloat32":
			if r.TryDecodeAsNil() {
				if x.FptrFloat32 != nil { // remove the if-true
					x.FptrFloat32 = nil
				}
			} else {
				if x.FptrFloat32 == nil {
					x.FptrFloat32 = new(float32)
				}

				*x.FptrFloat32 = (float32)(z.DecDecodeFloat32())
			}
		case "FFloat64":
			if r.TryDecodeAsNil() {
				x.FFloat64 = 0
			} else {
				x.FFloat64 = (float64)(r.DecodeFloat64())
			}
		case "FptrFloat64":
			if r.TryDecodeAsNil() {
				if x.FptrFloat64 != nil { // remove the if-true
					x.FptrFloat64 = nil
				}
			} else {
				if x.FptrFloat64 == nil {
					x.FptrFloat64 = new(float64)
				}

				*x.FptrFloat64 = (float64)(r.DecodeFloat64())
			}
		case "FUint":
			if r.TryDecodeAsNil() {
				x.FUint = 0
			} else {
				x.FUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FptrUint":
			if r.TryDecodeAsNil() {
				if x.FptrUint != nil { // remove the if-true
					x.FptrUint = nil
				}
			} else {
				if x.FptrUint == nil {
					x.FptrUint = new(uint)
				}

				*x.FptrUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FUint8":
			if r.TryDecodeAsNil() {
				x.FUint8 = 0
			} else {
				x.FUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		case "FptrUint8":
			if r.TryDecodeAsNil() {
				if x.FptrUint8 != nil { // remove the if-true
					x.FptrUint8 = nil
				}
			} else {
				if x.FptrUint8 == nil {
					x.FptrUint8 = new(uint8)
				}

				*x.FptrUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		case "FUint16":
			if r.TryDecodeAsNil() {
				x.FUint16 = 0
			} else {
				x.FUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "FptrUint16":
			if r.TryDecodeAsNil() {
				if x.FptrUint16 != nil { // remove the if-true
					x.FptrUint16 = nil
				}
			} else {
				if x.FptrUint16 == nil {
					x.FptrUint16 = new(uint16)
				}

				*x.FptrUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "FUint32":
			if r.TryDecodeAsNil() {
				x.FUint32 = 0
			} else {
				x.FUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "FptrUint32":
			if r.TryDecodeAsNil() {
				if x.FptrUint32 != nil { // remove the if-true
					x.FptrUint32 = nil
				}
			} else {
				if x.FptrUint32 == nil {
					x.FptrUint32 = new(uint32)
				}

				*x.FptrUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "FUint64":
			if r.TryDecodeAsNil() {
				x.FUint64 = 0
			} else {
				x.FUint64 = (uint64)(r.DecodeUint64())
			}
		case "FptrUint64":
			if r.TryDecodeAsNil() {
				if x.FptrUint64 != nil { // remove the if-true
					x.FptrUint64 = nil
				}
			} else {
				if x.FptrUint64 == nil {
					x.FptrUint64 = new(uint64)
				}

				*x.FptrUint64 = (uint64)(r.DecodeUint64())
			}
		case "FUintptr":
			if r.TryDecodeAsNil() {
				x.FUintptr = 0
			} else {
				x.FUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FptrUintptr":
			if r.TryDecodeAsNil() {
				if x.FptrUintptr != nil { // remove the if-true
					x.FptrUintptr = nil
				}
			} else {
				if x.FptrUintptr == nil {
					x.FptrUintptr = new(uintptr)
				}

				*x.FptrUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FInt":
			if r.TryDecodeAsNil() {
				x.FInt = 0
			} else {
				x.FInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}
		case "FptrInt":
			if r.TryDecodeAsNil() {
				if x.FptrInt != nil { // remove the if-true
					x.FptrInt = nil
				}
			} else {
				if x.FptrInt == nil {
					x.FptrInt = new(int)
				}

				*x.FptrInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}
		case "FInt8":
			if r.TryDecodeAsNil() {
				x.FInt8 = 0
			} else {
				x.FInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}
		case "FptrInt8":
			if r.TryDecodeAsNil() {
				if x.FptrInt8 != nil { // remove the if-true
					x.FptrInt8 = nil
				}
			} else {
				if x.FptrInt8 == nil {
					x.FptrInt8 = new(int8)
				}

				*x.FptrInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}
		case "FInt16":
			if r.TryDecodeAsNil() {
				x.FInt16 = 0
			} else {
				x.FInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}
		case "FptrInt16":
			if r.TryDecodeAsNil() {
				if x.FptrInt16 != nil { // remove the if-true
					x.FptrInt16 = nil
				}
			} else {
				if x.FptrInt16 == nil {
					x.FptrInt16 = new(int16)
				}

				*x.FptrInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}
		case "FInt32":
			if r.TryDecodeAsNil() {
				x.FInt32 = 0
			} else {
				x.FInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "FptrInt32":
			if r.TryDecodeAsNil() {
				if x.FptrInt32 != nil { // remove the if-true
					x.FptrInt32 = nil
				}
			} else {
				if x.FptrInt32 == nil {
					x.FptrInt32 = new(int32)
				}

				*x.FptrInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "FInt64":
			if r.TryDecodeAsNil() {
				x.FInt64 = 0
			} else {
				x.FInt64 = (int64)(r.DecodeInt64())
			}
		case "FptrInt64":
			if r.TryDecodeAsNil() {
				if x.FptrInt64 != nil { // remove the if-true
					x.FptrInt64 = nil
				}
			} else {
				if x.FptrInt64 == nil {
					x.FptrInt64 = new(int64)
				}

				*x.FptrInt64 = (int64)(r.DecodeInt64())
			}
		case "FBool":
			if r.TryDecodeAsNil() {
				x.FBool = false
			} else {
				x.FBool = (bool)(r.DecodeBool())
			}
		case "FptrBool":
			if r.TryDecodeAsNil() {
				if x.FptrBool != nil { // remove the if-true
					x.FptrBool = nil
				}
			} else {
				if x.FptrBool == nil {
					x.FptrBool = new(bool)
				}

				*x.FptrBool = (bool)(r.DecodeBool())
			}
		case "FSliceIntf":
			if r.TryDecodeAsNil() {
				x.FSliceIntf = nil
			} else {
				z.F.DecSliceIntfX(&x.FSliceIntf, d)
			}
		case "FptrSliceIntf":
			if r.TryDecodeAsNil() {
				if x.FptrSliceIntf != nil { // remove the if-true
					x.FptrSliceIntf = nil
				}
			} else {
				if x.FptrSliceIntf == nil {
					x.FptrSliceIntf = new([]interface{})
				}

				z.F.DecSliceIntfX(x.FptrSliceIntf, d)
			}
		case "FSliceString":
			if r.TryDecodeAsNil() {
				x.FSliceString = nil
			} else {
				z.F.DecSliceStringX(&x.FSliceString, d)
			}
		case "FptrSliceString":
			if r.TryDecodeAsNil() {
				if x.FptrSliceString != nil { // remove the if-true
					x.FptrSliceString = nil
				}
			} else {
				if x.FptrSliceString == nil {
					x.FptrSliceString = new([]string)
				}

				z.F.DecSliceStringX(x.FptrSliceString, d)
			}
		case "FSliceBytes":
			if r.TryDecodeAsNil() {
				x.FSliceBytes = nil
			} else {
				z.F.DecSliceBytesX(&x.FSliceBytes, d)
			}
		case "FptrSliceBytes":
			if r.TryDecodeAsNil() {
				if x.FptrSliceBytes != nil { // remove the if-true
					x.FptrSliceBytes = nil
				}
			} else {
				if x.FptrSliceBytes == nil {
					x.FptrSliceBytes = new([][]uint8)
				}

				z.F.DecSliceBytesX(x.FptrSliceBytes, d)
			}
		case "FSliceFloat32":
			if r.TryDecodeAsNil() {
				x.FSliceFloat32 = nil
			} else {
				z.F.DecSliceFloat32X(&x.FSliceFloat32, d)
			}
		case "FptrSliceFloat32":
			if r.TryDecodeAsNil() {
				if x.FptrSliceFloat32 != nil { // remove the if-true
					x.FptrSliceFloat32 = nil
				}
			} else {
				if x.FptrSliceFloat32 == nil {
					x.FptrSliceFloat32 = new([]float32)
				}

				z.F.DecSliceFloat32X(x.FptrSliceFloat32, d)
			}
		case "FSliceFloat64":
			if r.TryDecodeAsNil() {
				x.FSliceFloat64 = nil
			} else {
				z.F.DecSliceFloat64X(&x.FSliceFloat64, d)
			}
		case "FptrSliceFloat64":
			if r.TryDecodeAsNil() {
				if x.FptrSliceFloat64 != nil { // remove the if-true
					x.FptrSliceFloat64 = nil
				}
			} else {
				if x.FptrSliceFloat64 == nil {
					x.FptrSliceFloat64 = new([]float64)
				}

				z.F.DecSliceFloat64X(x.FptrSliceFloat64, d)
			}
		case "FSliceUint":
			if r.TryDecodeAsNil() {
				x.FSliceUint = nil
			} else {
				z.F.DecSliceUintX(&x.FSliceUint, d)
			}
		case "FptrSliceUint":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUint != nil { // remove the if-true
					x.FptrSliceUint = nil
				}
			} else {
				if x.FptrSliceUint == nil {
					x.FptrSliceUint = new([]uint)
				}

				z.F.DecSliceUintX(x.FptrSliceUint, d)
			}
		case "FSliceUint8":
			if r.TryDecodeAsNil() {
				x.FSliceUint8 = nil
			} else {
				x.FSliceUint8 = r.DecodeBytes(([]byte)(x.FSliceUint8), false)
			}
		case "FptrSliceUint8":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUint8 != nil { // remove the if-true
					x.FptrSliceUint8 = nil
				}
			} else {
				if x.FptrSliceUint8 == nil {
					x.FptrSliceUint8 = new([]uint8)
				}

				*x.FptrSliceUint8 = r.DecodeBytes(*(*[]byte)(x.FptrSliceUint8), false)
			}
		case "FSliceUint16":
			if r.TryDecodeAsNil() {
				x.FSliceUint16 = nil
			} else {
				z.F.DecSliceUint16X(&x.FSliceUint16, d)
			}
		case "FptrSliceUint16":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUint16 != nil { // remove the if-true
					x.FptrSliceUint16 = nil
				}
			} else {
				if x.FptrSliceUint16 == nil {
					x.FptrSliceUint16 = new([]uint16)
				}

				z.F.DecSliceUint16X(x.FptrSliceUint16, d)
			}
		case "FSliceUint32":
			if r.TryDecodeAsNil() {
				x.FSliceUint32 = nil
			} else {
				z.F.DecSliceUint32X(&x.FSliceUint32, d)
			}
		case "FptrSliceUint32":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUint32 != nil { // remove the if-true
					x.FptrSliceUint32 = nil
				}
			} else {
				if x.FptrSliceUint32 == nil {
					x.FptrSliceUint32 = new([]uint32)
				}

				z.F.DecSliceUint32X(x.FptrSliceUint32, d)
			}
		case "FSliceUint64":
			if r.TryDecodeAsNil() {
				x.FSliceUint64 = nil
			} else {
				z.F.DecSliceUint64X(&x.FSliceUint64, d)
			}
		case "FptrSliceUint64":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUint64 != nil { // remove the if-true
					x.FptrSliceUint64 = nil
				}
			} else {
				if x.FptrSliceUint64 == nil {
					x.FptrSliceUint64 = new([]uint64)
				}

				z.F.DecSliceUint64X(x.FptrSliceUint64, d)
			}
		case "FSliceUintptr":
			if r.TryDecodeAsNil() {
				x.FSliceUintptr = nil
			} else {
				z.F.DecSliceUintptrX(&x.FSliceUintptr, d)
			}
		case "FptrSliceUintptr":
			if r.TryDecodeAsNil() {
				if x.FptrSliceUintptr != nil { // remove the if-true
					x.FptrSliceUintptr = nil
				}
			} else {
				if x.FptrSliceUintptr == nil {
					x.FptrSliceUintptr = new([]uintptr)
				}

				z.F.DecSliceUintptrX(x.FptrSliceUintptr, d)
			}
		case "FSliceInt":
			if r.TryDecodeAsNil() {
				x.FSliceInt = nil
			} else {
				z.F.DecSliceIntX(&x.FSliceInt, d)
			}
		case "FptrSliceInt":
			if r.TryDecodeAsNil() {
				if x.FptrSliceInt != nil { // remove the if-true
					x.FptrSliceInt = nil
				}
			} else {
				if x.FptrSliceInt == nil {
					x.FptrSliceInt = new([]int)
				}

				z.F.DecSliceIntX(x.FptrSliceInt, d)
			}
		case "FSliceInt8":
			if r.TryDecodeAsNil() {
				x.FSliceInt8 = nil
			} else {
				z.F.DecSliceInt8X(&x.FSliceInt8, d)
			}
		case "FptrSliceInt8":
			if r.TryDecodeAsNil() {
				if x.FptrSliceInt8 != nil { // remove the if-true
					x.FptrSliceInt8 = nil
				}
			} else {
				if x.FptrSliceInt8 == nil {
					x.FptrSliceInt8 = new([]int8)
				}

				z.F.DecSliceInt8X(x.FptrSliceInt8, d)
			}
		case "FSliceInt16":
			if r.TryDecodeAsNil() {
				x.FSliceInt16 = nil
			} else {
				z.F.DecSliceInt16X(&x.FSliceInt16, d)
			}
		case "FptrSliceInt16":
			if r.TryDecodeAsNil() {
				if x.FptrSliceInt16 != nil { // remove the if-true
					x.FptrSliceInt16 = nil
				}
			} else {
				if x.FptrSliceInt16 == nil {
					x.FptrSliceInt16 = new([]int16)
				}

				z.F.DecSliceInt16X(x.FptrSliceInt16, d)
			}
		case "FSliceInt32":
			if r.TryDecodeAsNil() {
				x.FSliceInt32 = nil
			} else {
				z.F.DecSliceInt32X(&x.FSliceInt32, d)
			}
		case "FptrSliceInt32":
			if r.TryDecodeAsNil() {
				if x.FptrSliceInt32 != nil { // remove the if-true
					x.FptrSliceInt32 = nil
				}
			} else {
				if x.FptrSliceInt32 == nil {
					x.FptrSliceInt32 = new([]int32)
				}

				z.F.DecSliceInt32X(x.FptrSliceInt32, d)
			}
		case "FSliceInt64":
			if r.TryDecodeAsNil() {
				x.FSliceInt64 = nil
			} else {
				z.F.DecSliceInt64X(&x.FSliceInt64, d)
			}
		case "FptrSliceInt64":
			if r.TryDecodeAsNil() {
				if x.FptrSliceInt64 != nil { // remove the if-true
					x.FptrSliceInt64 = nil
				}
			} else {
				if x.FptrSliceInt64 == nil {
					x.FptrSliceInt64 = new([]int64)
				}

				z.F.DecSliceInt64X(x.FptrSliceInt64, d)
			}
		case "FSliceBool":
			if r.TryDecodeAsNil() {
				x.FSliceBool = nil
			} else {
				z.F.DecSliceBoolX(&x.FSliceBool, d)
			}
		case "FptrSliceBool":
			if r.TryDecodeAsNil() {
				if x.FptrSliceBool != nil { // remove the if-true
					x.FptrSliceBool = nil
				}
			} else {
				if x.FptrSliceBool == nil {
					x.FptrSliceBool = new([]bool)
				}

				z.F.DecSliceBoolX(x.FptrSliceBool, d)
			}
		case "FMapStringIntf":
			if r.TryDecodeAsNil() {
				x.FMapStringIntf = nil
			} else {
				z.F.DecMapStringIntfX(&x.FMapStringIntf, d)
			}
		case "FptrMapStringIntf":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringIntf != nil { // remove the if-true
					x.FptrMapStringIntf = nil
				}
			} else {
				if x.FptrMapStringIntf == nil {
					x.FptrMapStringIntf = new(map[string]interface{})
				}

				z.F.DecMapStringIntfX(x.FptrMapStringIntf, d)
			}
		case "FMapStringString":
			if r.TryDecodeAsNil() {
				x.FMapStringString = nil
			} else {
				z.F.DecMapStringStringX(&x.FMapStringString, d)
			}
		case "FptrMapStringString":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringString != nil { // remove the if-true
					x.FptrMapStringString = nil
				}
			} else {
				if x.FptrMapStringString == nil {
					x.FptrMapStringString = new(map[string]string)
				}

				z.F.DecMapStringStringX(x.FptrMapStringString, d)
			}
		case "FMapStringBytes":
			if r.TryDecodeAsNil() {
				x.FMapStringBytes = nil
			} else {
				z.F.DecMapStringBytesX(&x.FMapStringBytes, d)
			}
		case "FptrMapStringBytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringBytes != nil { // remove the if-true
					x.FptrMapStringBytes = nil
				}
			} else {
				if x.FptrMapStringBytes == nil {
					x.FptrMapStringBytes = new(map[string][]uint8)
				}

				z.F.DecMapStringBytesX(x.FptrMapStringBytes, d)
			}
		case "FMapStringUint":
			if r.TryDecodeAsNil() {
				x.FMapStringUint = nil
			} else {
				z.F.DecMapStringUintX(&x.FMapStringUint, d)
			}
		case "FptrMapStringUint":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringUint != nil { // remove the if-true
					x.FptrMapStringUint = nil
				}
			} else {
				if x.FptrMapStringUint == nil {
					x.FptrMapStringUint = new(map[string]uint)
				}

				z.F.DecMapStringUintX(x.FptrMapStringUint, d)
			}
		case "FMapStringUint8":
			if r.TryDecodeAsNil() {
				x.FMapStringUint8 = nil
			} else {
				z.F.DecMapStringUint8X(&x.FMapStringUint8, d)
			}
		case "FptrMapStringUint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringUint8 != nil { // remove the if-true
					x.FptrMapStringUint8 = nil
				}
			} else {
				if x.FptrMapStringUint8 == nil {
					x.FptrMapStringUint8 = new(map[string]uint8)
				}

				z.F.DecMapStringUint8X(x.FptrMapStringUint8, d)
			}
		case "FMapStringUint64":
			if r.TryDecodeAsNil() {
				x.FMapStringUint64 = nil
			} else {
				z.F.DecMapStringUint64X(&x.FMapStringUint64, d)
			}
		case "FptrMapStringUint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringUint64 != nil { // remove the if-true
					x.FptrMapStringUint64 = nil
				}
			} else {
				if x.FptrMapStringUint64 == nil {
					x.FptrMapStringUint64 = new(map[string]uint64)
				}

				z.F.DecMapStringUint64X(x.FptrMapStringUint64, d)
			}
		case "FMapStringUintptr":
			if r.TryDecodeAsNil() {
				x.FMapStringUintptr = nil
			} else {
				z.F.DecMapStringUintptrX(&x.FMapStringUintptr, d)
			}
		case "FptrMapStringUintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringUintptr != nil { // remove the if-true
					x.FptrMapStringUintptr = nil
				}
			} else {
				if x.FptrMapStringUintptr == nil {
					x.FptrMapStringUintptr = new(map[string]uintptr)
				}

				z.F.DecMapStringUintptrX(x.FptrMapStringUintptr, d)
			}
		case "FMapStringInt":
			if r.TryDecodeAsNil() {
				x.FMapStringInt = nil
			} else {
				z.F.DecMapStringIntX(&x.FMapStringInt, d)
			}
		case "FptrMapStringInt":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringInt != nil { // remove the if-true
					x.FptrMapStringInt = nil
				}
			} else {
				if x.FptrMapStringInt == nil {
					x.FptrMapStringInt = new(map[string]int)
				}

				z.F.DecMapStringIntX(x.FptrMapStringInt, d)
			}
		case "FMapStringInt64":
			if r.TryDecodeAsNil() {
				x.FMapStringInt64 = nil
			} else {
				z.F.DecMapStringInt64X(&x.FMapStringInt64, d)
			}
		case "FptrMapStringInt64":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringInt64 != nil { // remove the if-true
					x.FptrMapStringInt64 = nil
				}
			} else {
				if x.FptrMapStringInt64 == nil {
					x.FptrMapStringInt64 = new(map[string]int64)
				}

				z.F.DecMapStringInt64X(x.FptrMapStringInt64, d)
			}
		case "FMapStringFloat32":
			if r.TryDecodeAsNil() {
				x.FMapStringFloat32 = nil
			} else {
				z.F.DecMapStringFloat32X(&x.FMapStringFloat32, d)
			}
		case "FptrMapStringFloat32":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringFloat32 != nil { // remove the if-true
					x.FptrMapStringFloat32 = nil
				}
			} else {
				if x.FptrMapStringFloat32 == nil {
					x.FptrMapStringFloat32 = new(map[string]float32)
				}

				z.F.DecMapStringFloat32X(x.FptrMapStringFloat32, d)
			}
		case "FMapStringFloat64":
			if r.TryDecodeAsNil() {
				x.FMapStringFloat64 = nil
			} else {
				z.F.DecMapStringFloat64X(&x.FMapStringFloat64, d)
			}
		case "FptrMapStringFloat64":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringFloat64 != nil { // remove the if-true
					x.FptrMapStringFloat64 = nil
				}
			} else {
				if x.FptrMapStringFloat64 == nil {
					x.FptrMapStringFloat64 = new(map[string]float64)
				}

				z.F.DecMapStringFloat64X(x.FptrMapStringFloat64, d)
			}
		case "FMapStringBool":
			if r.TryDecodeAsNil() {
				x.FMapStringBool = nil
			} else {
				z.F.DecMapStringBoolX(&x.FMapStringBool, d)
			}
		case "FptrMapStringBool":
			if r.TryDecodeAsNil() {
				if x.FptrMapStringBool != nil { // remove the if-true
					x.FptrMapStringBool = nil
				}
			} else {
				if x.FptrMapStringBool == nil {
					x.FptrMapStringBool = new(map[string]bool)
				}

				z.F.DecMapStringBoolX(x.FptrMapStringBool, d)
			}
		case "FMapUintIntf":
			if r.TryDecodeAsNil() {
				x.FMapUintIntf = nil
			} else {
				z.F.DecMapUintIntfX(&x.FMapUintIntf, d)
			}
		case "FptrMapUintIntf":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintIntf != nil { // remove the if-true
					x.FptrMapUintIntf = nil
				}
			} else {
				if x.FptrMapUintIntf == nil {
					x.FptrMapUintIntf = new(map[uint]interface{})
				}

				z.F.DecMapUintIntfX(x.FptrMapUintIntf, d)
			}
		case "FMapUintString":
			if r.TryDecodeAsNil() {
				x.FMapUintString = nil
			} else {
				z.F.DecMapUintStringX(&x.FMapUintString, d)
			}
		case "FptrMapUintString":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintString != nil { // remove the if-true
					x.FptrMapUintString = nil
				}
			} else {
				if x.FptrMapUintString == nil {
					x.FptrMapUintString = new(map[uint]string)
				}

				z.F.DecMapUintStringX(x.FptrMapUintString, d)
			}
		case "FMapUintBytes":
			if r.TryDecodeAsNil() {
				x.FMapUintBytes = nil
			} else {
				z.F.DecMapUintBytesX(&x.FMapUintBytes, d)
			}
		case "FptrMapUintBytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintBytes != nil { // remove the if-true
					x.FptrMapUintBytes = nil
				}
			} else {
				if x.FptrMapUintBytes == nil {
					x.FptrMapUintBytes = new(map[uint][]uint8)
				}

				z.F.DecMapUintBytesX(x.FptrMapUintBytes, d)
			}
		case "FMapUintUint":
			if r.TryDecodeAsNil() {
				x.FMapUintUint = nil
			} else {
				z.F.DecMapUintUintX(&x.FMapUintUint, d)
			}
		case "FptrMapUintUint":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintUint != nil { // remove the if-true
					x.FptrMapUintUint = nil
				}
			} else {
				if x.FptrMapUintUint == nil {
					x.FptrMapUintUint = new(map[uint]uint)
				}

				z.F.DecMapUintUintX(x.FptrMapUintUint, d)
			}
		case "FMapUintUint8":
			if r.TryDecodeAsNil() {
				x.FMapUintUint8 = nil
			} else {
				z.F.DecMapUintUint8X(&x.FMapUintUint8, d)
			}
		case "FptrMapUintUint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintUint8 != nil { // remove the if-true
					x.FptrMapUintUint8 = nil
				}
			} else {
				if x.FptrMapUintUint8 == nil {
					x.FptrMapUintUint8 = new(map[uint]uint8)
				}

				z.F.DecMapUintUint8X(x.FptrMapUintUint8, d)
			}
		case "FMapUintUint64":
			if r.TryDecodeAsNil() {
				x.FMapUintUint64 = nil
			} else {
				z.F.DecMapUintUint64X(&x.FMapUintUint64, d)
			}
		case "FptrMapUintUint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintUint64 != nil { // remove the if-true
					x.FptrMapUintUint64 = nil
				}
			} else {
				if x.FptrMapUintUint64 == nil {
					x.FptrMapUintUint64 = new(map[uint]uint64)
				}

				z.F.DecMapUintUint64X(x.FptrMapUintUint64, d)
			}
		case "FMapUintUintptr":
			if r.TryDecodeAsNil() {
				x.FMapUintUintptr = nil
			} else {
				z.F.DecMapUintUintptrX(&x.FMapUintUintptr, d)
			}
		case "FptrMapUintUintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintUintptr != nil { // remove the if-true
					x.FptrMapUintUintptr = nil
				}
			} else {
				if x.FptrMapUintUintptr == nil {
					x.FptrMapUintUintptr = new(map[uint]uintptr)
				}

				z.F.DecMapUintUintptrX(x.FptrMapUintUintptr, d)
			}
		case "FMapUintInt":
			if r.TryDecodeAsNil() {
				x.FMapUintInt = nil
			} else {
				z.F.DecMapUintIntX(&x.FMapUintInt, d)
			}
		case "FptrMapUintInt":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintInt != nil { // remove the if-true
					x.FptrMapUintInt = nil
				}
			} else {
				if x.FptrMapUintInt == nil {
					x.FptrMapUintInt = new(map[uint]int)
				}

				z.F.DecMapUintIntX(x.FptrMapUintInt, d)
			}
		case "FMapUintInt64":
			if r.TryDecodeAsNil() {
				x.FMapUintInt64 = nil
			} else {
				z.F.DecMapUintInt64X(&x.FMapUintInt64, d)
			}
		case "FptrMapUintInt64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintInt64 != nil { // remove the if-true
					x.FptrMapUintInt64 = nil
				}
			} else {
				if x.FptrMapUintInt64 == nil {
					x.FptrMapUintInt64 = new(map[uint]int64)
				}

				z.F.DecMapUintInt64X(x.FptrMapUintInt64, d)
			}
		case "FMapUintFloat32":
			if r.TryDecodeAsNil() {
				x.FMapUintFloat32 = nil
			} else {
				z.F.DecMapUintFloat32X(&x.FMapUintFloat32, d)
			}
		case "FptrMapUintFloat32":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintFloat32 != nil { // remove the if-true
					x.FptrMapUintFloat32 = nil
				}
			} else {
				if x.FptrMapUintFloat32 == nil {
					x.FptrMapUintFloat32 = new(map[uint]float32)
				}

				z.F.DecMapUintFloat32X(x.FptrMapUintFloat32, d)
			}
		case "FMapUintFloat64":
			if r.TryDecodeAsNil() {
				x.FMapUintFloat64 = nil
			} else {
				z.F.DecMapUintFloat64X(&x.FMapUintFloat64, d)
			}
		case "FptrMapUintFloat64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintFloat64 != nil { // remove the if-true
					x.FptrMapUintFloat64 = nil
				}
			} else {
				if x.FptrMapUintFloat64 == nil {
					x.FptrMapUintFloat64 = new(map[uint]float64)
				}

				z.F.DecMapUintFloat64X(x.FptrMapUintFloat64, d)
			}
		case "FMapUintBool":
			if r.TryDecodeAsNil() {
				x.FMapUintBool = nil
			} else {
				z.F.DecMapUintBoolX(&x.FMapUintBool, d)
			}
		case "FptrMapUintBool":
			if r.TryDecodeAsNil() {
				if x.FptrMapUintBool != nil { // remove the if-true
					x.FptrMapUintBool = nil
				}
			} else {
				if x.FptrMapUintBool == nil {
					x.FptrMapUintBool = new(map[uint]bool)
				}

				z.F.DecMapUintBoolX(x.FptrMapUintBool, d)
			}
		case "FMapUint8Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint8Intf = nil
			} else {
				z.F.DecMapUint8IntfX(&x.FMapUint8Intf, d)
			}
		case "FptrMapUint8Intf":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Intf != nil { // remove the if-true
					x.FptrMapUint8Intf = nil
				}
			} else {
				if x.FptrMapUint8Intf == nil {
					x.FptrMapUint8Intf = new(map[uint8]interface{})
				}

				z.F.DecMapUint8IntfX(x.FptrMapUint8Intf, d)
			}
		case "FMapUint8String":
			if r.TryDecodeAsNil() {
				x.FMapUint8String = nil
			} else {
				z.F.DecMapUint8StringX(&x.FMapUint8String, d)
			}
		case "FptrMapUint8String":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8String != nil { // remove the if-true
					x.FptrMapUint8String = nil
				}
			} else {
				if x.FptrMapUint8String == nil {
					x.FptrMapUint8String = new(map[uint8]string)
				}

				z.F.DecMapUint8StringX(x.FptrMapUint8String, d)
			}
		case "FMapUint8Bytes":
			if r.TryDecodeAsNil() {
				x.FMapUint8Bytes = nil
			} else {
				z.F.DecMapUint8BytesX(&x.FMapUint8Bytes, d)
			}
		case "FptrMapUint8Bytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Bytes != nil { // remove the if-true
					x.FptrMapUint8Bytes = nil
				}
			} else {
				if x.FptrMapUint8Bytes == nil {
					x.FptrMapUint8Bytes = new(map[uint8][]uint8)
				}

				z.F.DecMapUint8BytesX(x.FptrMapUint8Bytes, d)
			}
		case "FMapUint8Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint = nil
			} else {
				z.F.DecMapUint8UintX(&x.FMapUint8Uint, d)
			}
		case "FptrMapUint8Uint":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Uint != nil { // remove the if-true
					x.FptrMapUint8Uint = nil
				}
			} else {
				if x.FptrMapUint8Uint == nil {
					x.FptrMapUint8Uint = new(map[uint8]uint)
				}

				z.F.DecMapUint8UintX(x.FptrMapUint8Uint, d)
			}
		case "FMapUint8Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint8 = nil
			} else {
				z.F.DecMapUint8Uint8X(&x.FMapUint8Uint8, d)
			}
		case "FptrMapUint8Uint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Uint8 != nil { // remove the if-true
					x.FptrMapUint8Uint8 = nil
				}
			} else {
				if x.FptrMapUint8Uint8 == nil {
					x.FptrMapUint8Uint8 = new(map[uint8]uint8)
				}

				z.F.DecMapUint8Uint8X(x.FptrMapUint8Uint8, d)
			}
		case "FMapUint8Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint64 = nil
			} else {
				z.F.DecMapUint8Uint64X(&x.FMapUint8Uint64, d)
			}
		case "FptrMapUint8Uint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Uint64 != nil { // remove the if-true
					x.FptrMapUint8Uint64 = nil
				}
			} else {
				if x.FptrMapUint8Uint64 == nil {
					x.FptrMapUint8Uint64 = new(map[uint8]uint64)
				}

				z.F.DecMapUint8Uint64X(x.FptrMapUint8Uint64, d)
			}
		case "FMapUint8Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uintptr = nil
			} else {
				z.F.DecMapUint8UintptrX(&x.FMapUint8Uintptr, d)
			}
		case "FptrMapUint8Uintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Uintptr != nil { // remove the if-true
					x.FptrMapUint8Uintptr = nil
				}
			} else {
				if x.FptrMapUint8Uintptr == nil {
					x.FptrMapUint8Uintptr = new(map[uint8]uintptr)
				}

				z.F.DecMapUint8UintptrX(x.FptrMapUint8Uintptr, d)
			}
		case "FMapUint8Int":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int = nil
			} else {
				z.F.DecMapUint8IntX(&x.FMapUint8Int, d)
			}
		case "FptrMapUint8Int":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Int != nil { // remove the if-true
					x.FptrMapUint8Int = nil
				}
			} else {
				if x.FptrMapUint8Int == nil {
					x.FptrMapUint8Int = new(map[uint8]int)
				}

				z.F.DecMapUint8IntX(x.FptrMapUint8Int, d)
			}
		case "FMapUint8Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int64 = nil
			} else {
				z.F.DecMapUint8Int64X(&x.FMapUint8Int64, d)
			}
		case "FptrMapUint8Int64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Int64 != nil { // remove the if-true
					x.FptrMapUint8Int64 = nil
				}
			} else {
				if x.FptrMapUint8Int64 == nil {
					x.FptrMapUint8Int64 = new(map[uint8]int64)
				}

				z.F.DecMapUint8Int64X(x.FptrMapUint8Int64, d)
			}
		case "FMapUint8Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint8Float32 = nil
			} else {
				z.F.DecMapUint8Float32X(&x.FMapUint8Float32, d)
			}
		case "FptrMapUint8Float32":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Float32 != nil { // remove the if-true
					x.FptrMapUint8Float32 = nil
				}
			} else {
				if x.FptrMapUint8Float32 == nil {
					x.FptrMapUint8Float32 = new(map[uint8]float32)
				}

				z.F.DecMapUint8Float32X(x.FptrMapUint8Float32, d)
			}
		case "FMapUint8Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Float64 = nil
			} else {
				z.F.DecMapUint8Float64X(&x.FMapUint8Float64, d)
			}
		case "FptrMapUint8Float64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Float64 != nil { // remove the if-true
					x.FptrMapUint8Float64 = nil
				}
			} else {
				if x.FptrMapUint8Float64 == nil {
					x.FptrMapUint8Float64 = new(map[uint8]float64)
				}

				z.F.DecMapUint8Float64X(x.FptrMapUint8Float64, d)
			}
		case "FMapUint8Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint8Bool = nil
			} else {
				z.F.DecMapUint8BoolX(&x.FMapUint8Bool, d)
			}
		case "FptrMapUint8Bool":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint8Bool != nil { // remove the if-true
					x.FptrMapUint8Bool = nil
				}
			} else {
				if x.FptrMapUint8Bool == nil {
					x.FptrMapUint8Bool = new(map[uint8]bool)
				}

				z.F.DecMapUint8BoolX(x.FptrMapUint8Bool, d)
			}
		case "FMapUint64Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint64Intf = nil
			} else {
				z.F.DecMapUint64IntfX(&x.FMapUint64Intf, d)
			}
		case "FptrMapUint64Intf":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Intf != nil { // remove the if-true
					x.FptrMapUint64Intf = nil
				}
			} else {
				if x.FptrMapUint64Intf == nil {
					x.FptrMapUint64Intf = new(map[uint64]interface{})
				}

				z.F.DecMapUint64IntfX(x.FptrMapUint64Intf, d)
			}
		case "FMapUint64String":
			if r.TryDecodeAsNil() {
				x.FMapUint64String = nil
			} else {
				z.F.DecMapUint64StringX(&x.FMapUint64String, d)
			}
		case "FptrMapUint64String":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64String != nil { // remove the if-true
					x.FptrMapUint64String = nil
				}
			} else {
				if x.FptrMapUint64String == nil {
					x.FptrMapUint64String = new(map[uint64]string)
				}

				z.F.DecMapUint64StringX(x.FptrMapUint64String, d)
			}
		case "FMapUint64Bytes":
			if r.TryDecodeAsNil() {
				x.FMapUint64Bytes = nil
			} else {
				z.F.DecMapUint64BytesX(&x.FMapUint64Bytes, d)
			}
		case "FptrMapUint64Bytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Bytes != nil { // remove the if-true
					x.FptrMapUint64Bytes = nil
				}
			} else {
				if x.FptrMapUint64Bytes == nil {
					x.FptrMapUint64Bytes = new(map[uint64][]uint8)
				}

				z.F.DecMapUint64BytesX(x.FptrMapUint64Bytes, d)
			}
		case "FMapUint64Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint = nil
			} else {
				z.F.DecMapUint64UintX(&x.FMapUint64Uint, d)
			}
		case "FptrMapUint64Uint":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Uint != nil { // remove the if-true
					x.FptrMapUint64Uint = nil
				}
			} else {
				if x.FptrMapUint64Uint == nil {
					x.FptrMapUint64Uint = new(map[uint64]uint)
				}

				z.F.DecMapUint64UintX(x.FptrMapUint64Uint, d)
			}
		case "FMapUint64Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint8 = nil
			} else {
				z.F.DecMapUint64Uint8X(&x.FMapUint64Uint8, d)
			}
		case "FptrMapUint64Uint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Uint8 != nil { // remove the if-true
					x.FptrMapUint64Uint8 = nil
				}
			} else {
				if x.FptrMapUint64Uint8 == nil {
					x.FptrMapUint64Uint8 = new(map[uint64]uint8)
				}

				z.F.DecMapUint64Uint8X(x.FptrMapUint64Uint8, d)
			}
		case "FMapUint64Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint64 = nil
			} else {
				z.F.DecMapUint64Uint64X(&x.FMapUint64Uint64, d)
			}
		case "FptrMapUint64Uint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Uint64 != nil { // remove the if-true
					x.FptrMapUint64Uint64 = nil
				}
			} else {
				if x.FptrMapUint64Uint64 == nil {
					x.FptrMapUint64Uint64 = new(map[uint64]uint64)
				}

				z.F.DecMapUint64Uint64X(x.FptrMapUint64Uint64, d)
			}
		case "FMapUint64Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uintptr = nil
			} else {
				z.F.DecMapUint64UintptrX(&x.FMapUint64Uintptr, d)
			}
		case "FptrMapUint64Uintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Uintptr != nil { // remove the if-true
					x.FptrMapUint64Uintptr = nil
				}
			} else {
				if x.FptrMapUint64Uintptr == nil {
					x.FptrMapUint64Uintptr = new(map[uint64]uintptr)
				}

				z.F.DecMapUint64UintptrX(x.FptrMapUint64Uintptr, d)
			}
		case "FMapUint64Int":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int = nil
			} else {
				z.F.DecMapUint64IntX(&x.FMapUint64Int, d)
			}
		case "FptrMapUint64Int":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Int != nil { // remove the if-true
					x.FptrMapUint64Int = nil
				}
			} else {
				if x.FptrMapUint64Int == nil {
					x.FptrMapUint64Int = new(map[uint64]int)
				}

				z.F.DecMapUint64IntX(x.FptrMapUint64Int, d)
			}
		case "FMapUint64Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int64 = nil
			} else {
				z.F.DecMapUint64Int64X(&x.FMapUint64Int64, d)
			}
		case "FptrMapUint64Int64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Int64 != nil { // remove the if-true
					x.FptrMapUint64Int64 = nil
				}
			} else {
				if x.FptrMapUint64Int64 == nil {
					x.FptrMapUint64Int64 = new(map[uint64]int64)
				}

				z.F.DecMapUint64Int64X(x.FptrMapUint64Int64, d)
			}
		case "FMapUint64Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint64Float32 = nil
			} else {
				z.F.DecMapUint64Float32X(&x.FMapUint64Float32, d)
			}
		case "FptrMapUint64Float32":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Float32 != nil { // remove the if-true
					x.FptrMapUint64Float32 = nil
				}
			} else {
				if x.FptrMapUint64Float32 == nil {
					x.FptrMapUint64Float32 = new(map[uint64]float32)
				}

				z.F.DecMapUint64Float32X(x.FptrMapUint64Float32, d)
			}
		case "FMapUint64Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Float64 = nil
			} else {
				z.F.DecMapUint64Float64X(&x.FMapUint64Float64, d)
			}
		case "FptrMapUint64Float64":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Float64 != nil { // remove the if-true
					x.FptrMapUint64Float64 = nil
				}
			} else {
				if x.FptrMapUint64Float64 == nil {
					x.FptrMapUint64Float64 = new(map[uint64]float64)
				}

				z.F.DecMapUint64Float64X(x.FptrMapUint64Float64, d)
			}
		case "FMapUint64Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint64Bool = nil
			} else {
				z.F.DecMapUint64BoolX(&x.FMapUint64Bool, d)
			}
		case "FptrMapUint64Bool":
			if r.TryDecodeAsNil() {
				if x.FptrMapUint64Bool != nil { // remove the if-true
					x.FptrMapUint64Bool = nil
				}
			} else {
				if x.FptrMapUint64Bool == nil {
					x.FptrMapUint64Bool = new(map[uint64]bool)
				}

				z.F.DecMapUint64BoolX(x.FptrMapUint64Bool, d)
			}
		case "FMapIntIntf":
			if r.TryDecodeAsNil() {
				x.FMapIntIntf = nil
			} else {
				z.F.DecMapIntIntfX(&x.FMapIntIntf, d)
			}
		case "FptrMapIntIntf":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntIntf != nil { // remove the if-true
					x.FptrMapIntIntf = nil
				}
			} else {
				if x.FptrMapIntIntf == nil {
					x.FptrMapIntIntf = new(map[int]interface{})
				}

				z.F.DecMapIntIntfX(x.FptrMapIntIntf, d)
			}
		case "FMapIntString":
			if r.TryDecodeAsNil() {
				x.FMapIntString = nil
			} else {
				z.F.DecMapIntStringX(&x.FMapIntString, d)
			}
		case "FptrMapIntString":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntString != nil { // remove the if-true
					x.FptrMapIntString = nil
				}
			} else {
				if x.FptrMapIntString == nil {
					x.FptrMapIntString = new(map[int]string)
				}

				z.F.DecMapIntStringX(x.FptrMapIntString, d)
			}
		case "FMapIntBytes":
			if r.TryDecodeAsNil() {
				x.FMapIntBytes = nil
			} else {
				z.F.DecMapIntBytesX(&x.FMapIntBytes, d)
			}
		case "FptrMapIntBytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntBytes != nil { // remove the if-true
					x.FptrMapIntBytes = nil
				}
			} else {
				if x.FptrMapIntBytes == nil {
					x.FptrMapIntBytes = new(map[int][]uint8)
				}

				z.F.DecMapIntBytesX(x.FptrMapIntBytes, d)
			}
		case "FMapIntUint":
			if r.TryDecodeAsNil() {
				x.FMapIntUint = nil
			} else {
				z.F.DecMapIntUintX(&x.FMapIntUint, d)
			}
		case "FptrMapIntUint":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntUint != nil { // remove the if-true
					x.FptrMapIntUint = nil
				}
			} else {
				if x.FptrMapIntUint == nil {
					x.FptrMapIntUint = new(map[int]uint)
				}

				z.F.DecMapIntUintX(x.FptrMapIntUint, d)
			}
		case "FMapIntUint8":
			if r.TryDecodeAsNil() {
				x.FMapIntUint8 = nil
			} else {
				z.F.DecMapIntUint8X(&x.FMapIntUint8, d)
			}
		case "FptrMapIntUint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntUint8 != nil { // remove the if-true
					x.FptrMapIntUint8 = nil
				}
			} else {
				if x.FptrMapIntUint8 == nil {
					x.FptrMapIntUint8 = new(map[int]uint8)
				}

				z.F.DecMapIntUint8X(x.FptrMapIntUint8, d)
			}
		case "FMapIntUint64":
			if r.TryDecodeAsNil() {
				x.FMapIntUint64 = nil
			} else {
				z.F.DecMapIntUint64X(&x.FMapIntUint64, d)
			}
		case "FptrMapIntUint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntUint64 != nil { // remove the if-true
					x.FptrMapIntUint64 = nil
				}
			} else {
				if x.FptrMapIntUint64 == nil {
					x.FptrMapIntUint64 = new(map[int]uint64)
				}

				z.F.DecMapIntUint64X(x.FptrMapIntUint64, d)
			}
		case "FMapIntUintptr":
			if r.TryDecodeAsNil() {
				x.FMapIntUintptr = nil
			} else {
				z.F.DecMapIntUintptrX(&x.FMapIntUintptr, d)
			}
		case "FptrMapIntUintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntUintptr != nil { // remove the if-true
					x.FptrMapIntUintptr = nil
				}
			} else {
				if x.FptrMapIntUintptr == nil {
					x.FptrMapIntUintptr = new(map[int]uintptr)
				}

				z.F.DecMapIntUintptrX(x.FptrMapIntUintptr, d)
			}
		case "FMapIntInt":
			if r.TryDecodeAsNil() {
				x.FMapIntInt = nil
			} else {
				z.F.DecMapIntIntX(&x.FMapIntInt, d)
			}
		case "FptrMapIntInt":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntInt != nil { // remove the if-true
					x.FptrMapIntInt = nil
				}
			} else {
				if x.FptrMapIntInt == nil {
					x.FptrMapIntInt = new(map[int]int)
				}

				z.F.DecMapIntIntX(x.FptrMapIntInt, d)
			}
		case "FMapIntInt64":
			if r.TryDecodeAsNil() {
				x.FMapIntInt64 = nil
			} else {
				z.F.DecMapIntInt64X(&x.FMapIntInt64, d)
			}
		case "FptrMapIntInt64":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntInt64 != nil { // remove the if-true
					x.FptrMapIntInt64 = nil
				}
			} else {
				if x.FptrMapIntInt64 == nil {
					x.FptrMapIntInt64 = new(map[int]int64)
				}

				z.F.DecMapIntInt64X(x.FptrMapIntInt64, d)
			}
		case "FMapIntFloat32":
			if r.TryDecodeAsNil() {
				x.FMapIntFloat32 = nil
			} else {
				z.F.DecMapIntFloat32X(&x.FMapIntFloat32, d)
			}
		case "FptrMapIntFloat32":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntFloat32 != nil { // remove the if-true
					x.FptrMapIntFloat32 = nil
				}
			} else {
				if x.FptrMapIntFloat32 == nil {
					x.FptrMapIntFloat32 = new(map[int]float32)
				}

				z.F.DecMapIntFloat32X(x.FptrMapIntFloat32, d)
			}
		case "FMapIntFloat64":
			if r.TryDecodeAsNil() {
				x.FMapIntFloat64 = nil
			} else {
				z.F.DecMapIntFloat64X(&x.FMapIntFloat64, d)
			}
		case "FptrMapIntFloat64":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntFloat64 != nil { // remove the if-true
					x.FptrMapIntFloat64 = nil
				}
			} else {
				if x.FptrMapIntFloat64 == nil {
					x.FptrMapIntFloat64 = new(map[int]float64)
				}

				z.F.DecMapIntFloat64X(x.FptrMapIntFloat64, d)
			}
		case "FMapIntBool":
			if r.TryDecodeAsNil() {
				x.FMapIntBool = nil
			} else {
				z.F.DecMapIntBoolX(&x.FMapIntBool, d)
			}
		case "FptrMapIntBool":
			if r.TryDecodeAsNil() {
				if x.FptrMapIntBool != nil { // remove the if-true
					x.FptrMapIntBool = nil
				}
			} else {
				if x.FptrMapIntBool == nil {
					x.FptrMapIntBool = new(map[int]bool)
				}

				z.F.DecMapIntBoolX(x.FptrMapIntBool, d)
			}
		case "FMapInt64Intf":
			if r.TryDecodeAsNil() {
				x.FMapInt64Intf = nil
			} else {
				z.F.DecMapInt64IntfX(&x.FMapInt64Intf, d)
			}
		case "FptrMapInt64Intf":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Intf != nil { // remove the if-true
					x.FptrMapInt64Intf = nil
				}
			} else {
				if x.FptrMapInt64Intf == nil {
					x.FptrMapInt64Intf = new(map[int64]interface{})
				}

				z.F.DecMapInt64IntfX(x.FptrMapInt64Intf, d)
			}
		case "FMapInt64String":
			if r.TryDecodeAsNil() {
				x.FMapInt64String = nil
			} else {
				z.F.DecMapInt64StringX(&x.FMapInt64String, d)
			}
		case "FptrMapInt64String":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64String != nil { // remove the if-true
					x.FptrMapInt64String = nil
				}
			} else {
				if x.FptrMapInt64String == nil {
					x.FptrMapInt64String = new(map[int64]string)
				}

				z.F.DecMapInt64StringX(x.FptrMapInt64String, d)
			}
		case "FMapInt64Bytes":
			if r.TryDecodeAsNil() {
				x.FMapInt64Bytes = nil
			} else {
				z.F.DecMapInt64BytesX(&x.FMapInt64Bytes, d)
			}
		case "FptrMapInt64Bytes":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Bytes != nil { // remove the if-true
					x.FptrMapInt64Bytes = nil
				}
			} else {
				if x.FptrMapInt64Bytes == nil {
					x.FptrMapInt64Bytes = new(map[int64][]uint8)
				}

				z.F.DecMapInt64BytesX(x.FptrMapInt64Bytes, d)
			}
		case "FMapInt64Uint":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint = nil
			} else {
				z.F.DecMapInt64UintX(&x.FMapInt64Uint, d)
			}
		case "FptrMapInt64Uint":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Uint != nil { // remove the if-true
					x.FptrMapInt64Uint = nil
				}
			} else {
				if x.FptrMapInt64Uint == nil {
					x.FptrMapInt64Uint = new(map[int64]uint)
				}

				z.F.DecMapInt64UintX(x.FptrMapInt64Uint, d)
			}
		case "FMapInt64Uint8":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint8 = nil
			} else {
				z.F.DecMapInt64Uint8X(&x.FMapInt64Uint8, d)
			}
		case "FptrMapInt64Uint8":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Uint8 != nil { // remove the if-true
					x.FptrMapInt64Uint8 = nil
				}
			} else {
				if x.FptrMapInt64Uint8 == nil {
					x.FptrMapInt64Uint8 = new(map[int64]uint8)
				}

				z.F.DecMapInt64Uint8X(x.FptrMapInt64Uint8, d)
			}
		case "FMapInt64Uint64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint64 = nil
			} else {
				z.F.DecMapInt64Uint64X(&x.FMapInt64Uint64, d)
			}
		case "FptrMapInt64Uint64":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Uint64 != nil { // remove the if-true
					x.FptrMapInt64Uint64 = nil
				}
			} else {
				if x.FptrMapInt64Uint64 == nil {
					x.FptrMapInt64Uint64 = new(map[int64]uint64)
				}

				z.F.DecMapInt64Uint64X(x.FptrMapInt64Uint64, d)
			}
		case "FMapInt64Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uintptr = nil
			} else {
				z.F.DecMapInt64UintptrX(&x.FMapInt64Uintptr, d)
			}
		case "FptrMapInt64Uintptr":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Uintptr != nil { // remove the if-true
					x.FptrMapInt64Uintptr = nil
				}
			} else {
				if x.FptrMapInt64Uintptr == nil {
					x.FptrMapInt64Uintptr = new(map[int64]uintptr)
				}

				z.F.DecMapInt64UintptrX(x.FptrMapInt64Uintptr, d)
			}
		case "FMapInt64Int":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int = nil
			} else {
				z.F.DecMapInt64IntX(&x.FMapInt64Int, d)
			}
		case "FptrMapInt64Int":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Int != nil { // remove the if-true
					x.FptrMapInt64Int = nil
				}
			} else {
				if x.FptrMapInt64Int == nil {
					x.FptrMapInt64Int = new(map[int64]int)
				}

				z.F.DecMapInt64IntX(x.FptrMapInt64Int, d)
			}
		case "FMapInt64Int64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int64 = nil
			} else {
				z.F.DecMapInt64Int64X(&x.FMapInt64Int64, d)
			}
		case "FptrMapInt64Int64":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Int64 != nil { // remove the if-true
					x.FptrMapInt64Int64 = nil
				}
			} else {
				if x.FptrMapInt64Int64 == nil {
					x.FptrMapInt64Int64 = new(map[int64]int64)
				}

				z.F.DecMapInt64Int64X(x.FptrMapInt64Int64, d)
			}
		case "FMapInt64Float32":
			if r.TryDecodeAsNil() {
				x.FMapInt64Float32 = nil
			} else {
				z.F.DecMapInt64Float32X(&x.FMapInt64Float32, d)
			}
		case "FptrMapInt64Float32":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Float32 != nil { // remove the if-true
					x.FptrMapInt64Float32 = nil
				}
			} else {
				if x.FptrMapInt64Float32 == nil {
					x.FptrMapInt64Float32 = new(map[int64]float32)
				}

				z.F.DecMapInt64Float32X(x.FptrMapInt64Float32, d)
			}
		case "FMapInt64Float64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Float64 = nil
			} else {
				z.F.DecMapInt64Float64X(&x.FMapInt64Float64, d)
			}
		case "FptrMapInt64Float64":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Float64 != nil { // remove the if-true
					x.FptrMapInt64Float64 = nil
				}
			} else {
				if x.FptrMapInt64Float64 == nil {
					x.FptrMapInt64Float64 = new(map[int64]float64)
				}

				z.F.DecMapInt64Float64X(x.FptrMapInt64Float64, d)
			}
		case "FMapInt64Bool":
			if r.TryDecodeAsNil() {
				x.FMapInt64Bool = nil
			} else {
				z.F.DecMapInt64BoolX(&x.FMapInt64Bool, d)
			}
		case "FptrMapInt64Bool":
			if r.TryDecodeAsNil() {
				if x.FptrMapInt64Bool != nil { // remove the if-true
					x.FptrMapInt64Bool = nil
				}
			} else {
				if x.FptrMapInt64Bool == nil {
					x.FptrMapInt64Bool = new(map[int64]bool)
				}

				z.F.DecMapInt64BoolX(x.FptrMapInt64Bool, d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecReadMapEnd()
}

func (x *TestMammoth2) codecDecodeSelfFromArray(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FIntf = nil
	} else {
		z.DecFallback(&x.FIntf, true)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrIntf != nil { // remove the if-true
			x.FptrIntf = nil
		}
	} else {
		if x.FptrIntf == nil {
			x.FptrIntf = new(interface{})
		}

		z.DecFallback(x.FptrIntf, true)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FString = ""
	} else {
		x.FString = (string)(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrString != nil { // remove the if-true
			x.FptrString = nil
		}
	} else {
		if x.FptrString == nil {
			x.FptrString = new(string)
		}

		*x.FptrString = (string)(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FBytes = nil
	} else {
		x.FBytes = r.DecodeBytes(([]byte)(x.FBytes), false)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrBytes != nil { // remove the if-true
			x.FptrBytes = nil
		}
	} else {
		if x.FptrBytes == nil {
			x.FptrBytes = new([]uint8)
		}

		*x.FptrBytes = r.DecodeBytes(*(*[]byte)(x.FptrBytes), false)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FFloat32 = 0
	} else {
		x.FFloat32 = (float32)(z.DecDecodeFloat32())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrFloat32 != nil { // remove the if-true
			x.FptrFloat32 = nil
		}
	} else {
		if x.FptrFloat32 == nil {
			x.FptrFloat32 = new(float32)
		}

		*x.FptrFloat32 = (float32)(z.DecDecodeFloat32())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FFloat64 = 0
	} else {
		x.FFloat64 = (float64)(r.DecodeFloat64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrFloat64 != nil { // remove the if-true
			x.FptrFloat64 = nil
		}
	} else {
		if x.FptrFloat64 == nil {
			x.FptrFloat64 = new(float64)
		}

		*x.FptrFloat64 = (float64)(r.DecodeFloat64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint = 0
	} else {
		x.FUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUint != nil { // remove the if-true
			x.FptrUint = nil
		}
	} else {
		if x.FptrUint == nil {
			x.FptrUint = new(uint)
		}

		*x.FptrUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint8 = 0
	} else {
		x.FUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUint8 != nil { // remove the if-true
			x.FptrUint8 = nil
		}
	} else {
		if x.FptrUint8 == nil {
			x.FptrUint8 = new(uint8)
		}

		*x.FptrUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint16 = 0
	} else {
		x.FUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUint16 != nil { // remove the if-true
			x.FptrUint16 = nil
		}
	} else {
		if x.FptrUint16 == nil {
			x.FptrUint16 = new(uint16)
		}

		*x.FptrUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint32 = 0
	} else {
		x.FUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUint32 != nil { // remove the if-true
			x.FptrUint32 = nil
		}
	} else {
		if x.FptrUint32 == nil {
			x.FptrUint32 = new(uint32)
		}

		*x.FptrUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint64 = 0
	} else {
		x.FUint64 = (uint64)(r.DecodeUint64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUint64 != nil { // remove the if-true
			x.FptrUint64 = nil
		}
	} else {
		if x.FptrUint64 == nil {
			x.FptrUint64 = new(uint64)
		}

		*x.FptrUint64 = (uint64)(r.DecodeUint64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUintptr = 0
	} else {
		x.FUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrUintptr != nil { // remove the if-true
			x.FptrUintptr = nil
		}
	} else {
		if x.FptrUintptr == nil {
			x.FptrUintptr = new(uintptr)
		}

		*x.FptrUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt = 0
	} else {
		x.FInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrInt != nil { // remove the if-true
			x.FptrInt = nil
		}
	} else {
		if x.FptrInt == nil {
			x.FptrInt = new(int)
		}

		*x.FptrInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt8 = 0
	} else {
		x.FInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrInt8 != nil { // remove the if-true
			x.FptrInt8 = nil
		}
	} else {
		if x.FptrInt8 == nil {
			x.FptrInt8 = new(int8)
		}

		*x.FptrInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt16 = 0
	} else {
		x.FInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrInt16 != nil { // remove the if-true
			x.FptrInt16 = nil
		}
	} else {
		if x.FptrInt16 == nil {
			x.FptrInt16 = new(int16)
		}

		*x.FptrInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt32 = 0
	} else {
		x.FInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrInt32 != nil { // remove the if-true
			x.FptrInt32 = nil
		}
	} else {
		if x.FptrInt32 == nil {
			x.FptrInt32 = new(int32)
		}

		*x.FptrInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt64 = 0
	} else {
		x.FInt64 = (int64)(r.DecodeInt64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrInt64 != nil { // remove the if-true
			x.FptrInt64 = nil
		}
	} else {
		if x.FptrInt64 == nil {
			x.FptrInt64 = new(int64)
		}

		*x.FptrInt64 = (int64)(r.DecodeInt64())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FBool = false
	} else {
		x.FBool = (bool)(r.DecodeBool())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrBool != nil { // remove the if-true
			x.FptrBool = nil
		}
	} else {
		if x.FptrBool == nil {
			x.FptrBool = new(bool)
		}

		*x.FptrBool = (bool)(r.DecodeBool())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceIntf = nil
	} else {
		z.F.DecSliceIntfX(&x.FSliceIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceIntf != nil { // remove the if-true
			x.FptrSliceIntf = nil
		}
	} else {
		if x.FptrSliceIntf == nil {
			x.FptrSliceIntf = new([]interface{})
		}

		z.F.DecSliceIntfX(x.FptrSliceIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceString = nil
	} else {
		z.F.DecSliceStringX(&x.FSliceString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceString != nil { // remove the if-true
			x.FptrSliceString = nil
		}
	} else {
		if x.FptrSliceString == nil {
			x.FptrSliceString = new([]string)
		}

		z.F.DecSliceStringX(x.FptrSliceString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceBytes = nil
	} else {
		z.F.DecSliceBytesX(&x.FSliceBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceBytes != nil { // remove the if-true
			x.FptrSliceBytes = nil
		}
	} else {
		if x.FptrSliceBytes == nil {
			x.FptrSliceBytes = new([][]uint8)
		}

		z.F.DecSliceBytesX(x.FptrSliceBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceFloat32 = nil
	} else {
		z.F.DecSliceFloat32X(&x.FSliceFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceFloat32 != nil { // remove the if-true
			x.FptrSliceFloat32 = nil
		}
	} else {
		if x.FptrSliceFloat32 == nil {
			x.FptrSliceFloat32 = new([]float32)
		}

		z.F.DecSliceFloat32X(x.FptrSliceFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceFloat64 = nil
	} else {
		z.F.DecSliceFloat64X(&x.FSliceFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceFloat64 != nil { // remove the if-true
			x.FptrSliceFloat64 = nil
		}
	} else {
		if x.FptrSliceFloat64 == nil {
			x.FptrSliceFloat64 = new([]float64)
		}

		z.F.DecSliceFloat64X(x.FptrSliceFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint = nil
	} else {
		z.F.DecSliceUintX(&x.FSliceUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUint != nil { // remove the if-true
			x.FptrSliceUint = nil
		}
	} else {
		if x.FptrSliceUint == nil {
			x.FptrSliceUint = new([]uint)
		}

		z.F.DecSliceUintX(x.FptrSliceUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint8 = nil
	} else {
		x.FSliceUint8 = r.DecodeBytes(([]byte)(x.FSliceUint8), false)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUint8 != nil { // remove the if-true
			x.FptrSliceUint8 = nil
		}
	} else {
		if x.FptrSliceUint8 == nil {
			x.FptrSliceUint8 = new([]uint8)
		}

		*x.FptrSliceUint8 = r.DecodeBytes(*(*[]byte)(x.FptrSliceUint8), false)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint16 = nil
	} else {
		z.F.DecSliceUint16X(&x.FSliceUint16, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUint16 != nil { // remove the if-true
			x.FptrSliceUint16 = nil
		}
	} else {
		if x.FptrSliceUint16 == nil {
			x.FptrSliceUint16 = new([]uint16)
		}

		z.F.DecSliceUint16X(x.FptrSliceUint16, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint32 = nil
	} else {
		z.F.DecSliceUint32X(&x.FSliceUint32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUint32 != nil { // remove the if-true
			x.FptrSliceUint32 = nil
		}
	} else {
		if x.FptrSliceUint32 == nil {
			x.FptrSliceUint32 = new([]uint32)
		}

		z.F.DecSliceUint32X(x.FptrSliceUint32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint64 = nil
	} else {
		z.F.DecSliceUint64X(&x.FSliceUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUint64 != nil { // remove the if-true
			x.FptrSliceUint64 = nil
		}
	} else {
		if x.FptrSliceUint64 == nil {
			x.FptrSliceUint64 = new([]uint64)
		}

		z.F.DecSliceUint64X(x.FptrSliceUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUintptr = nil
	} else {
		z.F.DecSliceUintptrX(&x.FSliceUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceUintptr != nil { // remove the if-true
			x.FptrSliceUintptr = nil
		}
	} else {
		if x.FptrSliceUintptr == nil {
			x.FptrSliceUintptr = new([]uintptr)
		}

		z.F.DecSliceUintptrX(x.FptrSliceUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt = nil
	} else {
		z.F.DecSliceIntX(&x.FSliceInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceInt != nil { // remove the if-true
			x.FptrSliceInt = nil
		}
	} else {
		if x.FptrSliceInt == nil {
			x.FptrSliceInt = new([]int)
		}

		z.F.DecSliceIntX(x.FptrSliceInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt8 = nil
	} else {
		z.F.DecSliceInt8X(&x.FSliceInt8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceInt8 != nil { // remove the if-true
			x.FptrSliceInt8 = nil
		}
	} else {
		if x.FptrSliceInt8 == nil {
			x.FptrSliceInt8 = new([]int8)
		}

		z.F.DecSliceInt8X(x.FptrSliceInt8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt16 = nil
	} else {
		z.F.DecSliceInt16X(&x.FSliceInt16, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceInt16 != nil { // remove the if-true
			x.FptrSliceInt16 = nil
		}
	} else {
		if x.FptrSliceInt16 == nil {
			x.FptrSliceInt16 = new([]int16)
		}

		z.F.DecSliceInt16X(x.FptrSliceInt16, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt32 = nil
	} else {
		z.F.DecSliceInt32X(&x.FSliceInt32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceInt32 != nil { // remove the if-true
			x.FptrSliceInt32 = nil
		}
	} else {
		if x.FptrSliceInt32 == nil {
			x.FptrSliceInt32 = new([]int32)
		}

		z.F.DecSliceInt32X(x.FptrSliceInt32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt64 = nil
	} else {
		z.F.DecSliceInt64X(&x.FSliceInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceInt64 != nil { // remove the if-true
			x.FptrSliceInt64 = nil
		}
	} else {
		if x.FptrSliceInt64 == nil {
			x.FptrSliceInt64 = new([]int64)
		}

		z.F.DecSliceInt64X(x.FptrSliceInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceBool = nil
	} else {
		z.F.DecSliceBoolX(&x.FSliceBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrSliceBool != nil { // remove the if-true
			x.FptrSliceBool = nil
		}
	} else {
		if x.FptrSliceBool == nil {
			x.FptrSliceBool = new([]bool)
		}

		z.F.DecSliceBoolX(x.FptrSliceBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringIntf = nil
	} else {
		z.F.DecMapStringIntfX(&x.FMapStringIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringIntf != nil { // remove the if-true
			x.FptrMapStringIntf = nil
		}
	} else {
		if x.FptrMapStringIntf == nil {
			x.FptrMapStringIntf = new(map[string]interface{})
		}

		z.F.DecMapStringIntfX(x.FptrMapStringIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringString = nil
	} else {
		z.F.DecMapStringStringX(&x.FMapStringString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringString != nil { // remove the if-true
			x.FptrMapStringString = nil
		}
	} else {
		if x.FptrMapStringString == nil {
			x.FptrMapStringString = new(map[string]string)
		}

		z.F.DecMapStringStringX(x.FptrMapStringString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringBytes = nil
	} else {
		z.F.DecMapStringBytesX(&x.FMapStringBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringBytes != nil { // remove the if-true
			x.FptrMapStringBytes = nil
		}
	} else {
		if x.FptrMapStringBytes == nil {
			x.FptrMapStringBytes = new(map[string][]uint8)
		}

		z.F.DecMapStringBytesX(x.FptrMapStringBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint = nil
	} else {
		z.F.DecMapStringUintX(&x.FMapStringUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringUint != nil { // remove the if-true
			x.FptrMapStringUint = nil
		}
	} else {
		if x.FptrMapStringUint == nil {
			x.FptrMapStringUint = new(map[string]uint)
		}

		z.F.DecMapStringUintX(x.FptrMapStringUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint8 = nil
	} else {
		z.F.DecMapStringUint8X(&x.FMapStringUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringUint8 != nil { // remove the if-true
			x.FptrMapStringUint8 = nil
		}
	} else {
		if x.FptrMapStringUint8 == nil {
			x.FptrMapStringUint8 = new(map[string]uint8)
		}

		z.F.DecMapStringUint8X(x.FptrMapStringUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint64 = nil
	} else {
		z.F.DecMapStringUint64X(&x.FMapStringUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringUint64 != nil { // remove the if-true
			x.FptrMapStringUint64 = nil
		}
	} else {
		if x.FptrMapStringUint64 == nil {
			x.FptrMapStringUint64 = new(map[string]uint64)
		}

		z.F.DecMapStringUint64X(x.FptrMapStringUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUintptr = nil
	} else {
		z.F.DecMapStringUintptrX(&x.FMapStringUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringUintptr != nil { // remove the if-true
			x.FptrMapStringUintptr = nil
		}
	} else {
		if x.FptrMapStringUintptr == nil {
			x.FptrMapStringUintptr = new(map[string]uintptr)
		}

		z.F.DecMapStringUintptrX(x.FptrMapStringUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt = nil
	} else {
		z.F.DecMapStringIntX(&x.FMapStringInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringInt != nil { // remove the if-true
			x.FptrMapStringInt = nil
		}
	} else {
		if x.FptrMapStringInt == nil {
			x.FptrMapStringInt = new(map[string]int)
		}

		z.F.DecMapStringIntX(x.FptrMapStringInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt64 = nil
	} else {
		z.F.DecMapStringInt64X(&x.FMapStringInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringInt64 != nil { // remove the if-true
			x.FptrMapStringInt64 = nil
		}
	} else {
		if x.FptrMapStringInt64 == nil {
			x.FptrMapStringInt64 = new(map[string]int64)
		}

		z.F.DecMapStringInt64X(x.FptrMapStringInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringFloat32 = nil
	} else {
		z.F.DecMapStringFloat32X(&x.FMapStringFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringFloat32 != nil { // remove the if-true
			x.FptrMapStringFloat32 = nil
		}
	} else {
		if x.FptrMapStringFloat32 == nil {
			x.FptrMapStringFloat32 = new(map[string]float32)
		}

		z.F.DecMapStringFloat32X(x.FptrMapStringFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringFloat64 = nil
	} else {
		z.F.DecMapStringFloat64X(&x.FMapStringFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringFloat64 != nil { // remove the if-true
			x.FptrMapStringFloat64 = nil
		}
	} else {
		if x.FptrMapStringFloat64 == nil {
			x.FptrMapStringFloat64 = new(map[string]float64)
		}

		z.F.DecMapStringFloat64X(x.FptrMapStringFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringBool = nil
	} else {
		z.F.DecMapStringBoolX(&x.FMapStringBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapStringBool != nil { // remove the if-true
			x.FptrMapStringBool = nil
		}
	} else {
		if x.FptrMapStringBool == nil {
			x.FptrMapStringBool = new(map[string]bool)
		}

		z.F.DecMapStringBoolX(x.FptrMapStringBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintIntf = nil
	} else {
		z.F.DecMapUintIntfX(&x.FMapUintIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintIntf != nil { // remove the if-true
			x.FptrMapUintIntf = nil
		}
	} else {
		if x.FptrMapUintIntf == nil {
			x.FptrMapUintIntf = new(map[uint]interface{})
		}

		z.F.DecMapUintIntfX(x.FptrMapUintIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintString = nil
	} else {
		z.F.DecMapUintStringX(&x.FMapUintString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintString != nil { // remove the if-true
			x.FptrMapUintString = nil
		}
	} else {
		if x.FptrMapUintString == nil {
			x.FptrMapUintString = new(map[uint]string)
		}

		z.F.DecMapUintStringX(x.FptrMapUintString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintBytes = nil
	} else {
		z.F.DecMapUintBytesX(&x.FMapUintBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintBytes != nil { // remove the if-true
			x.FptrMapUintBytes = nil
		}
	} else {
		if x.FptrMapUintBytes == nil {
			x.FptrMapUintBytes = new(map[uint][]uint8)
		}

		z.F.DecMapUintBytesX(x.FptrMapUintBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint = nil
	} else {
		z.F.DecMapUintUintX(&x.FMapUintUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintUint != nil { // remove the if-true
			x.FptrMapUintUint = nil
		}
	} else {
		if x.FptrMapUintUint == nil {
			x.FptrMapUintUint = new(map[uint]uint)
		}

		z.F.DecMapUintUintX(x.FptrMapUintUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint8 = nil
	} else {
		z.F.DecMapUintUint8X(&x.FMapUintUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintUint8 != nil { // remove the if-true
			x.FptrMapUintUint8 = nil
		}
	} else {
		if x.FptrMapUintUint8 == nil {
			x.FptrMapUintUint8 = new(map[uint]uint8)
		}

		z.F.DecMapUintUint8X(x.FptrMapUintUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint64 = nil
	} else {
		z.F.DecMapUintUint64X(&x.FMapUintUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintUint64 != nil { // remove the if-true
			x.FptrMapUintUint64 = nil
		}
	} else {
		if x.FptrMapUintUint64 == nil {
			x.FptrMapUintUint64 = new(map[uint]uint64)
		}

		z.F.DecMapUintUint64X(x.FptrMapUintUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUintptr = nil
	} else {
		z.F.DecMapUintUintptrX(&x.FMapUintUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintUintptr != nil { // remove the if-true
			x.FptrMapUintUintptr = nil
		}
	} else {
		if x.FptrMapUintUintptr == nil {
			x.FptrMapUintUintptr = new(map[uint]uintptr)
		}

		z.F.DecMapUintUintptrX(x.FptrMapUintUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt = nil
	} else {
		z.F.DecMapUintIntX(&x.FMapUintInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintInt != nil { // remove the if-true
			x.FptrMapUintInt = nil
		}
	} else {
		if x.FptrMapUintInt == nil {
			x.FptrMapUintInt = new(map[uint]int)
		}

		z.F.DecMapUintIntX(x.FptrMapUintInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt64 = nil
	} else {
		z.F.DecMapUintInt64X(&x.FMapUintInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintInt64 != nil { // remove the if-true
			x.FptrMapUintInt64 = nil
		}
	} else {
		if x.FptrMapUintInt64 == nil {
			x.FptrMapUintInt64 = new(map[uint]int64)
		}

		z.F.DecMapUintInt64X(x.FptrMapUintInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintFloat32 = nil
	} else {
		z.F.DecMapUintFloat32X(&x.FMapUintFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintFloat32 != nil { // remove the if-true
			x.FptrMapUintFloat32 = nil
		}
	} else {
		if x.FptrMapUintFloat32 == nil {
			x.FptrMapUintFloat32 = new(map[uint]float32)
		}

		z.F.DecMapUintFloat32X(x.FptrMapUintFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintFloat64 = nil
	} else {
		z.F.DecMapUintFloat64X(&x.FMapUintFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintFloat64 != nil { // remove the if-true
			x.FptrMapUintFloat64 = nil
		}
	} else {
		if x.FptrMapUintFloat64 == nil {
			x.FptrMapUintFloat64 = new(map[uint]float64)
		}

		z.F.DecMapUintFloat64X(x.FptrMapUintFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintBool = nil
	} else {
		z.F.DecMapUintBoolX(&x.FMapUintBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUintBool != nil { // remove the if-true
			x.FptrMapUintBool = nil
		}
	} else {
		if x.FptrMapUintBool == nil {
			x.FptrMapUintBool = new(map[uint]bool)
		}

		z.F.DecMapUintBoolX(x.FptrMapUintBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Intf = nil
	} else {
		z.F.DecMapUint8IntfX(&x.FMapUint8Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Intf != nil { // remove the if-true
			x.FptrMapUint8Intf = nil
		}
	} else {
		if x.FptrMapUint8Intf == nil {
			x.FptrMapUint8Intf = new(map[uint8]interface{})
		}

		z.F.DecMapUint8IntfX(x.FptrMapUint8Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8String = nil
	} else {
		z.F.DecMapUint8StringX(&x.FMapUint8String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8String != nil { // remove the if-true
			x.FptrMapUint8String = nil
		}
	} else {
		if x.FptrMapUint8String == nil {
			x.FptrMapUint8String = new(map[uint8]string)
		}

		z.F.DecMapUint8StringX(x.FptrMapUint8String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Bytes = nil
	} else {
		z.F.DecMapUint8BytesX(&x.FMapUint8Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Bytes != nil { // remove the if-true
			x.FptrMapUint8Bytes = nil
		}
	} else {
		if x.FptrMapUint8Bytes == nil {
			x.FptrMapUint8Bytes = new(map[uint8][]uint8)
		}

		z.F.DecMapUint8BytesX(x.FptrMapUint8Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint = nil
	} else {
		z.F.DecMapUint8UintX(&x.FMapUint8Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Uint != nil { // remove the if-true
			x.FptrMapUint8Uint = nil
		}
	} else {
		if x.FptrMapUint8Uint == nil {
			x.FptrMapUint8Uint = new(map[uint8]uint)
		}

		z.F.DecMapUint8UintX(x.FptrMapUint8Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint8 = nil
	} else {
		z.F.DecMapUint8Uint8X(&x.FMapUint8Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Uint8 != nil { // remove the if-true
			x.FptrMapUint8Uint8 = nil
		}
	} else {
		if x.FptrMapUint8Uint8 == nil {
			x.FptrMapUint8Uint8 = new(map[uint8]uint8)
		}

		z.F.DecMapUint8Uint8X(x.FptrMapUint8Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint64 = nil
	} else {
		z.F.DecMapUint8Uint64X(&x.FMapUint8Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Uint64 != nil { // remove the if-true
			x.FptrMapUint8Uint64 = nil
		}
	} else {
		if x.FptrMapUint8Uint64 == nil {
			x.FptrMapUint8Uint64 = new(map[uint8]uint64)
		}

		z.F.DecMapUint8Uint64X(x.FptrMapUint8Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uintptr = nil
	} else {
		z.F.DecMapUint8UintptrX(&x.FMapUint8Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Uintptr != nil { // remove the if-true
			x.FptrMapUint8Uintptr = nil
		}
	} else {
		if x.FptrMapUint8Uintptr == nil {
			x.FptrMapUint8Uintptr = new(map[uint8]uintptr)
		}

		z.F.DecMapUint8UintptrX(x.FptrMapUint8Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int = nil
	} else {
		z.F.DecMapUint8IntX(&x.FMapUint8Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Int != nil { // remove the if-true
			x.FptrMapUint8Int = nil
		}
	} else {
		if x.FptrMapUint8Int == nil {
			x.FptrMapUint8Int = new(map[uint8]int)
		}

		z.F.DecMapUint8IntX(x.FptrMapUint8Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int64 = nil
	} else {
		z.F.DecMapUint8Int64X(&x.FMapUint8Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Int64 != nil { // remove the if-true
			x.FptrMapUint8Int64 = nil
		}
	} else {
		if x.FptrMapUint8Int64 == nil {
			x.FptrMapUint8Int64 = new(map[uint8]int64)
		}

		z.F.DecMapUint8Int64X(x.FptrMapUint8Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Float32 = nil
	} else {
		z.F.DecMapUint8Float32X(&x.FMapUint8Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Float32 != nil { // remove the if-true
			x.FptrMapUint8Float32 = nil
		}
	} else {
		if x.FptrMapUint8Float32 == nil {
			x.FptrMapUint8Float32 = new(map[uint8]float32)
		}

		z.F.DecMapUint8Float32X(x.FptrMapUint8Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Float64 = nil
	} else {
		z.F.DecMapUint8Float64X(&x.FMapUint8Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Float64 != nil { // remove the if-true
			x.FptrMapUint8Float64 = nil
		}
	} else {
		if x.FptrMapUint8Float64 == nil {
			x.FptrMapUint8Float64 = new(map[uint8]float64)
		}

		z.F.DecMapUint8Float64X(x.FptrMapUint8Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Bool = nil
	} else {
		z.F.DecMapUint8BoolX(&x.FMapUint8Bool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint8Bool != nil { // remove the if-true
			x.FptrMapUint8Bool = nil
		}
	} else {
		if x.FptrMapUint8Bool == nil {
			x.FptrMapUint8Bool = new(map[uint8]bool)
		}

		z.F.DecMapUint8BoolX(x.FptrMapUint8Bool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Intf = nil
	} else {
		z.F.DecMapUint64IntfX(&x.FMapUint64Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Intf != nil { // remove the if-true
			x.FptrMapUint64Intf = nil
		}
	} else {
		if x.FptrMapUint64Intf == nil {
			x.FptrMapUint64Intf = new(map[uint64]interface{})
		}

		z.F.DecMapUint64IntfX(x.FptrMapUint64Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64String = nil
	} else {
		z.F.DecMapUint64StringX(&x.FMapUint64String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64String != nil { // remove the if-true
			x.FptrMapUint64String = nil
		}
	} else {
		if x.FptrMapUint64String == nil {
			x.FptrMapUint64String = new(map[uint64]string)
		}

		z.F.DecMapUint64StringX(x.FptrMapUint64String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Bytes = nil
	} else {
		z.F.DecMapUint64BytesX(&x.FMapUint64Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Bytes != nil { // remove the if-true
			x.FptrMapUint64Bytes = nil
		}
	} else {
		if x.FptrMapUint64Bytes == nil {
			x.FptrMapUint64Bytes = new(map[uint64][]uint8)
		}

		z.F.DecMapUint64BytesX(x.FptrMapUint64Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint = nil
	} else {
		z.F.DecMapUint64UintX(&x.FMapUint64Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Uint != nil { // remove the if-true
			x.FptrMapUint64Uint = nil
		}
	} else {
		if x.FptrMapUint64Uint == nil {
			x.FptrMapUint64Uint = new(map[uint64]uint)
		}

		z.F.DecMapUint64UintX(x.FptrMapUint64Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint8 = nil
	} else {
		z.F.DecMapUint64Uint8X(&x.FMapUint64Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Uint8 != nil { // remove the if-true
			x.FptrMapUint64Uint8 = nil
		}
	} else {
		if x.FptrMapUint64Uint8 == nil {
			x.FptrMapUint64Uint8 = new(map[uint64]uint8)
		}

		z.F.DecMapUint64Uint8X(x.FptrMapUint64Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint64 = nil
	} else {
		z.F.DecMapUint64Uint64X(&x.FMapUint64Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Uint64 != nil { // remove the if-true
			x.FptrMapUint64Uint64 = nil
		}
	} else {
		if x.FptrMapUint64Uint64 == nil {
			x.FptrMapUint64Uint64 = new(map[uint64]uint64)
		}

		z.F.DecMapUint64Uint64X(x.FptrMapUint64Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uintptr = nil
	} else {
		z.F.DecMapUint64UintptrX(&x.FMapUint64Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Uintptr != nil { // remove the if-true
			x.FptrMapUint64Uintptr = nil
		}
	} else {
		if x.FptrMapUint64Uintptr == nil {
			x.FptrMapUint64Uintptr = new(map[uint64]uintptr)
		}

		z.F.DecMapUint64UintptrX(x.FptrMapUint64Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int = nil
	} else {
		z.F.DecMapUint64IntX(&x.FMapUint64Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Int != nil { // remove the if-true
			x.FptrMapUint64Int = nil
		}
	} else {
		if x.FptrMapUint64Int == nil {
			x.FptrMapUint64Int = new(map[uint64]int)
		}

		z.F.DecMapUint64IntX(x.FptrMapUint64Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int64 = nil
	} else {
		z.F.DecMapUint64Int64X(&x.FMapUint64Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Int64 != nil { // remove the if-true
			x.FptrMapUint64Int64 = nil
		}
	} else {
		if x.FptrMapUint64Int64 == nil {
			x.FptrMapUint64Int64 = new(map[uint64]int64)
		}

		z.F.DecMapUint64Int64X(x.FptrMapUint64Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Float32 = nil
	} else {
		z.F.DecMapUint64Float32X(&x.FMapUint64Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Float32 != nil { // remove the if-true
			x.FptrMapUint64Float32 = nil
		}
	} else {
		if x.FptrMapUint64Float32 == nil {
			x.FptrMapUint64Float32 = new(map[uint64]float32)
		}

		z.F.DecMapUint64Float32X(x.FptrMapUint64Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Float64 = nil
	} else {
		z.F.DecMapUint64Float64X(&x.FMapUint64Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Float64 != nil { // remove the if-true
			x.FptrMapUint64Float64 = nil
		}
	} else {
		if x.FptrMapUint64Float64 == nil {
			x.FptrMapUint64Float64 = new(map[uint64]float64)
		}

		z.F.DecMapUint64Float64X(x.FptrMapUint64Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Bool = nil
	} else {
		z.F.DecMapUint64BoolX(&x.FMapUint64Bool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapUint64Bool != nil { // remove the if-true
			x.FptrMapUint64Bool = nil
		}
	} else {
		if x.FptrMapUint64Bool == nil {
			x.FptrMapUint64Bool = new(map[uint64]bool)
		}

		z.F.DecMapUint64BoolX(x.FptrMapUint64Bool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntIntf = nil
	} else {
		z.F.DecMapIntIntfX(&x.FMapIntIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntIntf != nil { // remove the if-true
			x.FptrMapIntIntf = nil
		}
	} else {
		if x.FptrMapIntIntf == nil {
			x.FptrMapIntIntf = new(map[int]interface{})
		}

		z.F.DecMapIntIntfX(x.FptrMapIntIntf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntString = nil
	} else {
		z.F.DecMapIntStringX(&x.FMapIntString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntString != nil { // remove the if-true
			x.FptrMapIntString = nil
		}
	} else {
		if x.FptrMapIntString == nil {
			x.FptrMapIntString = new(map[int]string)
		}

		z.F.DecMapIntStringX(x.FptrMapIntString, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntBytes = nil
	} else {
		z.F.DecMapIntBytesX(&x.FMapIntBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntBytes != nil { // remove the if-true
			x.FptrMapIntBytes = nil
		}
	} else {
		if x.FptrMapIntBytes == nil {
			x.FptrMapIntBytes = new(map[int][]uint8)
		}

		z.F.DecMapIntBytesX(x.FptrMapIntBytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint = nil
	} else {
		z.F.DecMapIntUintX(&x.FMapIntUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntUint != nil { // remove the if-true
			x.FptrMapIntUint = nil
		}
	} else {
		if x.FptrMapIntUint == nil {
			x.FptrMapIntUint = new(map[int]uint)
		}

		z.F.DecMapIntUintX(x.FptrMapIntUint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint8 = nil
	} else {
		z.F.DecMapIntUint8X(&x.FMapIntUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntUint8 != nil { // remove the if-true
			x.FptrMapIntUint8 = nil
		}
	} else {
		if x.FptrMapIntUint8 == nil {
			x.FptrMapIntUint8 = new(map[int]uint8)
		}

		z.F.DecMapIntUint8X(x.FptrMapIntUint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint64 = nil
	} else {
		z.F.DecMapIntUint64X(&x.FMapIntUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntUint64 != nil { // remove the if-true
			x.FptrMapIntUint64 = nil
		}
	} else {
		if x.FptrMapIntUint64 == nil {
			x.FptrMapIntUint64 = new(map[int]uint64)
		}

		z.F.DecMapIntUint64X(x.FptrMapIntUint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUintptr = nil
	} else {
		z.F.DecMapIntUintptrX(&x.FMapIntUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntUintptr != nil { // remove the if-true
			x.FptrMapIntUintptr = nil
		}
	} else {
		if x.FptrMapIntUintptr == nil {
			x.FptrMapIntUintptr = new(map[int]uintptr)
		}

		z.F.DecMapIntUintptrX(x.FptrMapIntUintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt = nil
	} else {
		z.F.DecMapIntIntX(&x.FMapIntInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntInt != nil { // remove the if-true
			x.FptrMapIntInt = nil
		}
	} else {
		if x.FptrMapIntInt == nil {
			x.FptrMapIntInt = new(map[int]int)
		}

		z.F.DecMapIntIntX(x.FptrMapIntInt, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt64 = nil
	} else {
		z.F.DecMapIntInt64X(&x.FMapIntInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntInt64 != nil { // remove the if-true
			x.FptrMapIntInt64 = nil
		}
	} else {
		if x.FptrMapIntInt64 == nil {
			x.FptrMapIntInt64 = new(map[int]int64)
		}

		z.F.DecMapIntInt64X(x.FptrMapIntInt64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntFloat32 = nil
	} else {
		z.F.DecMapIntFloat32X(&x.FMapIntFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntFloat32 != nil { // remove the if-true
			x.FptrMapIntFloat32 = nil
		}
	} else {
		if x.FptrMapIntFloat32 == nil {
			x.FptrMapIntFloat32 = new(map[int]float32)
		}

		z.F.DecMapIntFloat32X(x.FptrMapIntFloat32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntFloat64 = nil
	} else {
		z.F.DecMapIntFloat64X(&x.FMapIntFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntFloat64 != nil { // remove the if-true
			x.FptrMapIntFloat64 = nil
		}
	} else {
		if x.FptrMapIntFloat64 == nil {
			x.FptrMapIntFloat64 = new(map[int]float64)
		}

		z.F.DecMapIntFloat64X(x.FptrMapIntFloat64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntBool = nil
	} else {
		z.F.DecMapIntBoolX(&x.FMapIntBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapIntBool != nil { // remove the if-true
			x.FptrMapIntBool = nil
		}
	} else {
		if x.FptrMapIntBool == nil {
			x.FptrMapIntBool = new(map[int]bool)
		}

		z.F.DecMapIntBoolX(x.FptrMapIntBool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Intf = nil
	} else {
		z.F.DecMapInt64IntfX(&x.FMapInt64Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Intf != nil { // remove the if-true
			x.FptrMapInt64Intf = nil
		}
	} else {
		if x.FptrMapInt64Intf == nil {
			x.FptrMapInt64Intf = new(map[int64]interface{})
		}

		z.F.DecMapInt64IntfX(x.FptrMapInt64Intf, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64String = nil
	} else {
		z.F.DecMapInt64StringX(&x.FMapInt64String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64String != nil { // remove the if-true
			x.FptrMapInt64String = nil
		}
	} else {
		if x.FptrMapInt64String == nil {
			x.FptrMapInt64String = new(map[int64]string)
		}

		z.F.DecMapInt64StringX(x.FptrMapInt64String, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Bytes = nil
	} else {
		z.F.DecMapInt64BytesX(&x.FMapInt64Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Bytes != nil { // remove the if-true
			x.FptrMapInt64Bytes = nil
		}
	} else {
		if x.FptrMapInt64Bytes == nil {
			x.FptrMapInt64Bytes = new(map[int64][]uint8)
		}

		z.F.DecMapInt64BytesX(x.FptrMapInt64Bytes, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint = nil
	} else {
		z.F.DecMapInt64UintX(&x.FMapInt64Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Uint != nil { // remove the if-true
			x.FptrMapInt64Uint = nil
		}
	} else {
		if x.FptrMapInt64Uint == nil {
			x.FptrMapInt64Uint = new(map[int64]uint)
		}

		z.F.DecMapInt64UintX(x.FptrMapInt64Uint, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint8 = nil
	} else {
		z.F.DecMapInt64Uint8X(&x.FMapInt64Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Uint8 != nil { // remove the if-true
			x.FptrMapInt64Uint8 = nil
		}
	} else {
		if x.FptrMapInt64Uint8 == nil {
			x.FptrMapInt64Uint8 = new(map[int64]uint8)
		}

		z.F.DecMapInt64Uint8X(x.FptrMapInt64Uint8, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint64 = nil
	} else {
		z.F.DecMapInt64Uint64X(&x.FMapInt64Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Uint64 != nil { // remove the if-true
			x.FptrMapInt64Uint64 = nil
		}
	} else {
		if x.FptrMapInt64Uint64 == nil {
			x.FptrMapInt64Uint64 = new(map[int64]uint64)
		}

		z.F.DecMapInt64Uint64X(x.FptrMapInt64Uint64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uintptr = nil
	} else {
		z.F.DecMapInt64UintptrX(&x.FMapInt64Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Uintptr != nil { // remove the if-true
			x.FptrMapInt64Uintptr = nil
		}
	} else {
		if x.FptrMapInt64Uintptr == nil {
			x.FptrMapInt64Uintptr = new(map[int64]uintptr)
		}

		z.F.DecMapInt64UintptrX(x.FptrMapInt64Uintptr, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int = nil
	} else {
		z.F.DecMapInt64IntX(&x.FMapInt64Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Int != nil { // remove the if-true
			x.FptrMapInt64Int = nil
		}
	} else {
		if x.FptrMapInt64Int == nil {
			x.FptrMapInt64Int = new(map[int64]int)
		}

		z.F.DecMapInt64IntX(x.FptrMapInt64Int, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int64 = nil
	} else {
		z.F.DecMapInt64Int64X(&x.FMapInt64Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Int64 != nil { // remove the if-true
			x.FptrMapInt64Int64 = nil
		}
	} else {
		if x.FptrMapInt64Int64 == nil {
			x.FptrMapInt64Int64 = new(map[int64]int64)
		}

		z.F.DecMapInt64Int64X(x.FptrMapInt64Int64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Float32 = nil
	} else {
		z.F.DecMapInt64Float32X(&x.FMapInt64Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Float32 != nil { // remove the if-true
			x.FptrMapInt64Float32 = nil
		}
	} else {
		if x.FptrMapInt64Float32 == nil {
			x.FptrMapInt64Float32 = new(map[int64]float32)
		}

		z.F.DecMapInt64Float32X(x.FptrMapInt64Float32, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Float64 = nil
	} else {
		z.F.DecMapInt64Float64X(&x.FMapInt64Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Float64 != nil { // remove the if-true
			x.FptrMapInt64Float64 = nil
		}
	} else {
		if x.FptrMapInt64Float64 == nil {
			x.FptrMapInt64Float64 = new(map[int64]float64)
		}

		z.F.DecMapInt64Float64X(x.FptrMapInt64Float64, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Bool = nil
	} else {
		z.F.DecMapInt64BoolX(&x.FMapInt64Bool, d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.FptrMapInt64Bool != nil { // remove the if-true
			x.FptrMapInt64Bool = nil
		}
	} else {
		if x.FptrMapInt64Bool == nil {
			x.FptrMapInt64Bool = new(map[int64]bool)
		}

		z.F.DecMapInt64BoolX(x.FptrMapInt64Bool, d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecReadArrayEnd()
}

func (x testMammoth2Binary) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if z.EncBinary() {
		z.EncBinaryMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Binary) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		*x = (testMammoth2Binary)(r.DecodeUint64())
	}
}

func (x testMammoth2Text) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if !z.EncBinary() {
		z.EncTextMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Text) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if !z.DecBinary() {
		z.DecTextUnmarshal(x)
	} else {
		*x = (testMammoth2Text)(r.DecodeUint64())
	}
}

func (x testMammoth2Json) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if !z.EncBinary() && z.IsJSONHandle() {
		z.EncJSONMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Json) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		*x = (testMammoth2Json)(r.DecodeUint64())
	}
}

func (x *testMammoth2Basic) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.enctestMammoth2Basic((*testMammoth2Basic)(x), e)
		}
	}
}

func (x *testMammoth2Basic) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.dectestMammoth2Basic((*testMammoth2Basic)(x), d)
	}
}

func (x *TestMammoth2Wrapper) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(8)
				z.EncWriteArrayElem()
				yy11 := &x.V
				yy11.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				x.T.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				x.B.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				x.J.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				yy16 := &x.C
				yy16.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				h.encMaptestMammoth2BasicTestMammoth2((map[testMammoth2Basic]TestMammoth2)(x.M), e)
				z.EncWriteArrayElem()
				h.encSliceTestMammoth2(([]TestMammoth2)(x.L), e)
				z.EncWriteArrayElem()
				yy20 := &x.A
				h.encArray4int64((*[4]int64)(yy20), e)
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(8)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"V\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `V`)
				}
				z.EncWriteMapElemValue()
				yy22 := &x.V
				yy22.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"T\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `T`)
				}
				z.EncWriteMapElemValue()
				x.T.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"B\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `B`)
				}
				z.EncWriteMapElemValue()
				x.B.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"J\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `J`)
				}
				z.EncWriteMapElemValue()
				x.J.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"C\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `C`)
				}
				z.EncWriteMapElemValue()
				yy27 := &x.C
				yy27.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"M\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `M`)
				}
				z.EncWriteMapElemValue()
				h.encMaptestMammoth2BasicTestMammoth2((map[testMammoth2Basic]TestMammoth2)(x.M), e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"L\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `L`)
				}
				z.EncWriteMapElemValue()
				h.encSliceTestMammoth2(([]TestMammoth2)(x.L), e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"A\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `A`)
				}
				z.EncWriteMapElemValue()
				yy31 := &x.A
				h.encArray4int64((*[4]int64)(yy31), e)
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *TestMammoth2Wrapper) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap19781 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
				z.DecReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray19781 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 == 0 {
				z.DecReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct19781)
		}
	}
}

func (x *TestMammoth2Wrapper) codecDecodeSelfFromMap(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "V":
			if r.TryDecodeAsNil() {
				x.V = TestMammoth2{}
			} else {
				x.V.CodecDecodeSelf(d)
			}
		case "T":
			if r.TryDecodeAsNil() {
				x.T = 0
			} else {
				x.T.CodecDecodeSelf(d)
			}
		case "B":
			if r.TryDecodeAsNil() {
				x.B = 0
			} else {
				x.B.CodecDecodeSelf(d)
			}
		case "J":
			if r.TryDecodeAsNil() {
				x.J = 0
			} else {
				x.J.CodecDecodeSelf(d)
			}
		case "C":
			if r.TryDecodeAsNil() {
				x.C = testMammoth2Basic{}
			} else {
				x.C.CodecDecodeSelf(d)
			}
		case "M":
			if r.TryDecodeAsNil() {
				x.M = nil
			} else {
				h.decMaptestMammoth2BasicTestMammoth2((*map[testMammoth2Basic]TestMammoth2)(&x.M), d)
			}
		case "L":
			if r.TryDecodeAsNil() {
				x.L = nil
			} else {
				h.decSliceTestMammoth2((*[]TestMammoth2)(&x.L), d)
			}
		case "A":
			if r.TryDecodeAsNil() {
				x.A = [4]int64{}
			} else {
				h.decArray4int64((*[4]int64)(&x.A), d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecReadMapEnd()
}

func (x *TestMammoth2Wrapper) codecDecodeSelfFromArray(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.V = TestMammoth2{}
	} else {
		x.V.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.T = 0
	} else {
		x.T.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.B = 0
	} else {
		x.B.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.J = 0
	} else {
		x.J.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.C = testMammoth2Basic{}
	} else {
		x.C.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.M = nil
	} else {
		h.decMaptestMammoth2BasicTestMammoth2((*map[testMammoth2Basic]TestMammoth2)(&x.M), d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.L = nil
	} else {
		h.decSliceTestMammoth2((*[]TestMammoth2)(&x.L), d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.A = [4]int64{}
	} else {
		h.decArray4int64((*[4]int64)(&x.A), d)
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecReadArrayEnd()
}

func (x codecSelfer19781) enctestMammoth2Basic(v *testMammoth2Basic, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeUint(uint64(yyv1))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer19781) dectestMammoth2Basic(v *testMammoth2Basic, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint64)(r.DecodeUint64())
				}
			}
		}
	}
	yyh1.End()
}

func (x codecSelfer19781) encMaptestMammoth2BasicTestMammoth2(v map[testMammoth2Basic]TestMammoth2, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	z.EncWriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncWriteMapElemKey()
		yy2 := &yyk1
		yy2.CodecEncodeSelf(e)
		z.EncWriteMapElemValue()
		yy4 := &yyv1
		yy4.CodecEncodeSelf(e)
	}
	z.EncWriteMapEnd()
}

func (x codecSelfer19781) decMaptestMammoth2BasicTestMammoth2(v *map[testMammoth2Basic]TestMammoth2, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := z.DecReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2032)
		yyv1 = make(map[testMammoth2Basic]TestMammoth2, yyrl1)
		*v = yyv1
	}
	var yymk1 testMammoth2Basic
	var yymv1 TestMammoth2
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			z.DecReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = testMammoth2Basic{}
			} else {
				yymk1.CodecDecodeSelf(d)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TestMammoth2{}
			}
			z.DecReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1.CodecDecodeSelf(d)
			}
			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = TestMammoth2{}
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecReadMapEnd()
}

func (x codecSelfer19781) encSliceTestMammoth2(v []TestMammoth2, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer19781) decSliceTestMammoth2(v *[]TestMammoth2, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []TestMammoth2{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2000)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]TestMammoth2, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2000)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]TestMammoth2, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, TestMammoth2{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = TestMammoth2{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]TestMammoth2, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encArray4int64(v *[4]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeInt(int64(yyv1))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer19781) decArray4int64(v *[4]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int64)(r.DecodeInt64())
				}
			}
		}
	}
	yyh1.End()
}
